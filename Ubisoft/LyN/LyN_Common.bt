//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

//https://forum.zoneofgames.ru/topic/23644-from-dust/?page=6
//https://github.com/RetingencyPlan/le_quickbms_script_compendium/blob/master/sally_bf.bms
//https://autoit-script.ru/threads/pomogite-rasparsit-tekstovyj-fajl.6525/

//NOTE: This documentation and all templates here is based off content extracted with sally_bf.bms. This may be different if you use a different tool.

//Content here referencing hexes is byteswapped

#include "../../LHR/Common.bt"

typedef uint32 LyN_HandleKey;

typedef struct LyN_Int64 //Officially I64 but really it's two ints.
{
    int high;
    int low;
};

typedef struct LyN_NestedInt64
{
    LyN_Int64 nestedI64;
    quad quadVal;
};

typedef struct LyN_MathCurve
{
    float minX;
    float maxX;
    float minY;
    float maxY;
    uint32 samplesCnt;
    float samples[samplesCnt];
    uint32 type;
    uint32 colors;
};

typedef enum <uint32>
{
    LyN_TextureFormat_Targa,
    LyN_TextureFormat_Targa32Bit,
    LyN_TextureFormat_DXT //DXT1 on 4 JD Wii U
} LyN_TextureFormat;

typedef enum <ubyte>
{
    LyN_TexPixelFormat_ARGB8888,
    LyN_TexPixelFormat_R16F,
    LyN_TexPixelFormat_RG16F,
    LyN_TexPixelFormat_ABGR16F,
    LyN_TexPixelFormat_R32F,
    LyN_TexPixelFormat_GR32F,
    LyN_TexPixelFormat_ABGR32F,
    LyN_TexPixelFormat_D16,
    LyN_TexPixelFormat_D24S8,
    LyN_TexPixelFormat_DXT1, //CMPR on Wii
    LyN_TexPixelFormat_DXT3,
    LyN_TexPixelFormat_DXT5,
    LyN_TexPixelFormat_D16Tex,
    LyN_TexPixelFormat_D24S8Tex,
    LyN_TexPixelFormat_RGB565,
    LyN_TexPixelFormat_A2RGB10,
    LyN_TexPixelFormat_XRGB8888,
    LyN_TexPixelFormat_A8, //On Wii, some Wii swizzled 8 channel format
    LyN_TexPixelFormat_L8,
    LyN_TexPixelFormat_AL88,
    LyN_TexPixelFormat_ARGB4444,
    LyN_TexPixelFormat_AL44,
    LyN_TexPixelFormat_NONE,
    LyN_TexPixelFormat_RawDepth, //No clue, 8 channel
    LyN_TexPixelFormat_ABGR16,
    LyN_TexPixelFormat_L16,
    LyN_TexPixelFormat_GR16,
    LyN_TexPixelFormat_ACPR, //No clue, distance-based DXT1?
} LyN_TexPixelFormat;

typedef struct LyN_ArchivedFileHeader
{
    uint32 archivedFileLen;
    uint32 userLen;
    uint32 lenRef;
    uint32 flags;
    uint32 rawFileLen;
    LyN_Int64 nextPosition;
    long fileHandle;
};

typedef struct LyN_SerializeHeader
{
    uint32 unk; //handle?
    uint32 chunkSz;
    uint32 serializeDataSz;
};

typedef struct LyN_NewArchivedFileHeader
{
    uint32 unk[5];
    uint32 contentType;
    uint64 unk2;
};

typedef struct LyN_ThreeDShadowTexture
{
    uint32 ver; //0x0A: RGH
    Vector2_F32 sizeFactor;
    float zAttFactor;
    float zSzFactor;
    float zStartFactor;
    if (ver >= 5) float opacFactor;
    uint32 shadowTextureUsedHandle;
    Vector3_F32 unk;
    if (ver < 2) uint16 unk2;
    uint32 flags;
    if (ver == 3)
    {
        uint32 unk3;
    }
    uint32 projMeth;
    uint32 shadowColor;
    ubyte renderGroup;
};

typedef struct LyN_Stock
{
    int32 magic; //0xC0DEC0DE
    if (magic == 0xC0DEC0DE)
    {
        int32 ver;
        int32 firstInt;
    }
    int32 unk[4];
    float unk[5];
    uint32 obj[5];
    if (magic == 0xC0DEC0DE) uint32 modifier[5];
    Vector3_F32 vec[5];
};

typedef struct LyN_Matrix44
{
    Vector3_F32 I;
    float SX;
    Vector3_F32 J;
    float SY;
    Vector3_F32 K;
    float SZ;
    Vector3_F32 T;
    float W;
};

typedef struct LyN_TRMatrix
{
    LyN_Matrix44 mtx44[2];
    Vector3_F32 Vec3;
    uint32 unk;
};

typedef struct LyN_RenderParam
{
    uint32 ver; //9 in RGH. 16 in RLand.
    if (ver)
    {
        ubyte flags;
        ubyte prio;
        ubyte viewport;
        ubyte viewpoint;
        RGBA_UByte colorBack;
        RGBA_UByte colorAmb[2]<optimize=false>;
        if (ver > 5 && ver != 7) RGBA_UByte colorSHV;
        if (ver >= 5)
        {
            ubyte lightMaskNandLGCY;
            ubyte lightMaskOrLGCY;
        }
        if (ver >= 9) float lightCoef[8];
        //if (ver >= 5) CullParam;
        //if (ver >= 5) CullParam;
    }
    else //Legacy params
    {
        uint32 unk[8];
        uint32 lgcyVer;
        if (lgcyVer >= 2)
        {
            uint32 unk2[2];
            if (ver >= 3) uint32 unk3;
            if (ver >= 6) uint32 unk4;
            if (ver >= 7) uint32 unk5;
            if (ver >= 5) uint32 unk6;
            if (ver >= 12) uint32 unk7;
            if (ver >= 15) uint32 unk8;
            if (ver >= 10)
            {
                uint32 unk9[7];
                if (ver >= 11) uint32 unk10[3];
                uint32 unk11[3];
            }
        }
        if (lgcyVer >= 4)
        {
            uint32 magic;
            uint32 newVer;
        }
    }
};


/*
Notes (RGH + JD4):

Channel: Wii Channel, wog loading
RLab: Not defined as Wii Channel, wog loading
PC: Not defined as Wii Channel, wog loading, FF003C8 mentions B4141025 as the preload wog from default.cfg

GrpRef: Refs to libs (FCG+EFG)
    MathLib
    DebugLib
    DynamicLib
    DynamicLib
    EventLib
    GameLib
    MappingLib
    CommonLib
    TriggerLib
    ModifierLib
    GraphicsLib
    ActionsLib
    BunniesLib
    EventLibBunnies
    TriggerBunnyLib

Reference:
    0x00: BigFileRef (in WOG, 25100DD8 (PC) = _basic_ForMaps_GPP.wog, in GRP, 3 u32s, the last two being padding, in)
    
Mdl Ref:
    

Bin:
    16/A0: Text, may contain RIFF headers and other stuff idk
    1D****LL/93: Text (A: EN, B: FR, C: SP D: EN, E: ES, F: SP, 0: EN, 3: EN, 9 FR), on PC can contain OGG files, referenced in FC files
    F1: Text
    FB: MAGMA [Universal serialization lib, mentions texture names]
    FC: These usually contain 76 bytes of handles? Text references?
        uint32 refs;
        struct
        {
            uint32 hKey; //a0 ref
            uint32 unk[2];
        } Ref[refs];
    FD (BIN): All tend to reference the scenemixer and microphone, on PC OGG files
        RefTable (U32, 12 byte refs):
    FE: Texture container
    FF: Serialized (can reference text and FE+FD files[?]) [?] Can be referenced in 93, FF and FD?
        uint32 handlekey; //?
    
    NewLyN Formats:
        AI: AI
        FEU: Fire UI (SWF)
        FFD: Fire Font Data (SWF)
        GEO: ?
        LIG: Light
        MAT: Material
        MTA: Metal
*/