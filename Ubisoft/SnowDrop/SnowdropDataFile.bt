//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: SnowdropDataFile.bt
//   Authors: LolHacksRule
//   Version: 
//   Purpose: Reading the file
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

//SDFToc:
//Header: 95%
//SDFDataInfo: 100%
//SDFMetaData: 95%
//DDSHeaderData: 65%
//SDFDictData: 100%
//SDFDataEnder: 95%

//Seems to work best with v22 SDF but idk, todo proper DDS data identification and unk data

#include "../../LHR/Common.bt"

//local uint i < hidden = true > = 0;
//local uint i2 < hidden = true > = 0;

typedef enum < uint32 > {
    SDFToc = 1414743383,
    SDFData = 1196574018,
} SDFType;

typedef struct UnknownEntry
{
    string massive;
    uint64 unkData[4]; //It's the same values in sdf.sdfver after the first one, what are they?
    string ubisoft;
};

LittleEndian();

SDFType UbiSDFType<bgcolor = cBlue>;
uint32 ver<bgcolor = cGreen>;
if (UbiSDFType == SDFToc)
{
    struct SnowdropDataFileTableOfContents
    {
        uint32 uncompSize;
        uint32 compSize;
        uint32 firstSDFDataID;
        uint32 SDFDataCnt;
        uint32 DDSHdrCnt;
        UnknownEntry HeaderEntry <bgcolor = cRed>;
        FSkip(1);
        struct SDFDataInfo
        {
            struct SDFDataFileSizes
            {
                for (i = 0; i < SDFDataCnt; i++)
                {
                    struct SDFDataFileSize
                    {
                        uint32 FSize;
                    } sdffsize;
                }
                //string massive; //Uncomment for MR2
            } sdffs<bgcolor = cYellow>;
            struct SDFDataMetaData
            {
                for (i2 = 0; i2 < SDFDataCnt; i2++)
                {
                    UnknownEntry SDFMetaDataEntry <bgcolor = cRed>;
                }
                //FSkip(-2);
            } sdfmd;
        } sdfDataInfo;
        struct DDSHeaderData
        {
            for (i2 = 0; i2 < DDSHdrCnt; i2++)
            {
                struct DDSHeader
                {
                    uint32 DDSHeaderSize;
                    byte DDSFileHdr[DDSHeaderSize];
                    if (HeaderEntry.unkData[3] == 3728795003314070590 || HeaderEntry.unkData[3] == 15654633386367974625) //M+R KB + 2
                    {
                        byte unk[200-DDSHeaderSize] <bgcolor = cRed>; //There has to be a better way
                    }
                    else //SBTFBW NX BASE
                    {
                        byte unk[148-DDSHeaderSize] <bgcolor = cRed>; //There has to be a better way
                    }
                    /*if (i2 >= 1)
                    {
                        for (i2 = i2; i2 < i2; i2++)
                        {
                            FSkip(4);
                        }
                    }*/
                } dds<bgcolor = cBlack>;
            }
        } ddshdrs;
        //FSeek(2169);
        //FSeek(534557);
        //FSeek(18197);
        struct SDFDictData
        {
            uint32 magicCheck<hidden=true>;
            FSkip(-4);
            if (magicCheck == 0xFD2FB528 || magicCheck == 0xDFF25B82)
            {
                byte ZSTDCompressedDict[compSize] <bgcolor = cGreen>;
            }
            else if (magicCheck == 0x184D2204)
            {
                byte LZ4CompressedDict[compSize];
            }
            else
            {
                byte ZlibCompressedDict[compSize];
            }
        } sdfDict;
        UnknownEntry SDFTOCEndEntry <bgcolor = cRed>;
    } sdfTableOfContentsFile<bgcolor = cLtBlue>;
}

if (UbiSDFType == SDFData)
{
    struct SDFDataFile
    {
        UnknownEntry SDFDataStart;
        //eventually...
        //UnknownEntry SDFDataEnd;
    } sdfDataFile;
}

//if (UbiSDFType == SDFToc)