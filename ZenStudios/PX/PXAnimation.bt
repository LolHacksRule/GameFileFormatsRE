//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: PXTexture.bt
//   Authors: LolHacksRule
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "PXCommon.bt"

local uint DEBUG_PRINT = 0; //Write fancy stuff (will lag if on big files)

struct
{
    LittleEndian();
    PX_BinaryHeader PXBinaryHeader<bgcolor=cDkBlue>;
    if (PXBinaryHeader.PXBinaryDataType != PX_BinaryDataType_Animation)
    {
        Printf("Not a PX Animation.");
        break;
    }
    uint32 ver<bgcolor=cGreen>; //6 in Zen Pinball RollerCoaster, 7 in PVZ on MacOS/Amazon/iOS/Android standalone CDN, 8 in PVZ standalone iOS CDN, 9 in PFX3 first depot, mostly
    if (ver > 6)
    {
        time_t exportDate<bgcolor=cLtBlue>; //Export date i32, seems to be a day before the table date
    }
    float lenNoSpeed<bgcolor=cBlue>; //Always 0xB2CBF0A0 in v6 (at least in gui)
    float speed<bgcolor=cBlue>;
    uint32 entries<bgcolor=cRed>; //> 1 has export meta, only seen 2
    if (DEBUG_PRINT)
    {
        Printf("Version: %u\n", ver);
        Printf("Export date (unknown year): %s\n", TimeTToString(exportDate));
        Printf("Length no speed: %f\n", lenNoSpeed);
        Printf("Speed: %f\n", speed);
    }
    if (entries)
    {
        time_t timestamp[entries+2]<bgcolor=cLtBlue>; //Export date i32, seems to be a day before the table date, or is it 3 timestamps + 1 u32
        U32_StringEntry exportString<bgcolor=cGreen>;
        U32_StringEntry name<bgcolor=cGreen>;
        PX_Platform platform<bgcolor=cBlue>; //3 on iOS, 5 on Android, platform ID?
        uint32 unk2[2]<bgcolor=cRed>; //Seems to be 0
        if (DEBUG_PRINT)
        {
            Printf("Export Source: %s\n", exportString.theString);
            Printf("Platform: %s\n", EnumToString(platform));
        }
    }
    uint32 animClips<bgcolor=cGreen>; //Seems to always be present
    if (animClips)
    {
        if (DEBUG_PRINT)
        {
            Printf("Animation Clips:\n");
        }
        struct
        {
            UByte_StringEntry name;
            float startNoSpeed;
            float endNoSpeed;
            if (DEBUG_PRINT)
            {
                Printf(" %s: start (no speed): %f end (no speed) %f\n", name.theString, startNoSpeed, endNoSpeed);
            }
        } AnimationClip[animClips]<optimize=false, bgcolor=cGreen>;
    }
    uint32 animNodes<bgcolor=cRed>;
    if (DEBUG_PRINT && animNodes)
    {
        Printf("Animation Nodes:\n");
    }
    //FSeek(668);
    if (animNodes)
    {
        struct
        {            
            if (ver >= 6)
            {
                if (ver <= 7) //Finicky fix
                {
                    uint32 unk<bgcolor=cRed>;
                    uint32 unk2<bgcolor=cRed>;
                }
                else
                {
                    //Seems to break on v7
                    BigEndian(); //Why
                    PX_TypeInfo rootTypeInfo<bgcolor=cBlue>; //0x00201000 is also a PES, why idk
                    LittleEndian();
                    UByte_StringEntry animatableName<bgcolor=cGreen>;
                    float animationChannel<bgcolor=cRed>; //or flags?
                }
                if (DEBUG_PRINT)
                {
                    Printf("----Animation Node Start----\n");
                    Printf(" Animatable Name: %s\n", animatableName.theString);
                    Printf(" Animation Channel(?): %f\n", animationChannel);
                }
                if (ver == 9) //Fix PFX3 (V9)
                {
                    UByte_StringEntry animatableChannelName<bgcolor=cGreen>;
                    if (DEBUG_PRINT)
                    {
                        Printf(" Animatable Channel Name: %s\n", animatableChannelName.theString);
                    }
                }
                PX_TypeInfo dataTypeInfo<bgcolor=cDkGreen>;
                if (DEBUG_PRINT)
                {
                    Printf(" Animation Node Data Type: %s\n", EnumToString(dataTypeInfo));
                }
                if (ver == 7)
                {
                    float animCh<bgcolor=cRed>; //Correct?
                }
                switch (dataTypeInfo) //why
                {
                    case 12291: PX_AnimationChannel_FloatLinearFloat floatLinearFloat<bgcolor=cGreen>; break;
                    case 12292: PX_AnimationChannel_FloatBezierFloat floatBezierFloat<bgcolor=cLtGreen>; break;
                    case 12294: PX_AnimationChannel_FloatConstantFloat floatConstantFloat<bgcolor=cGreen>; break;
                    case 12295: PX_AnimationChannel_FloatListFloat floatListFloat<bgcolor=cPurple>; break;
                    case 12354: PX_AnimationChannel_FloatBezierPoint3Float floatBezierPoint3Float<bgcolor=cDkPurple>; break;
                    case 12385: PX_AnimationChannel_FloatListBool floatListBool<bgcolor=cBlue>; break;
                    case 12418: PX_AnimationChannel_FloatLerpQuaternionFloat floatLerpQuaternionFloat<bgcolor=cBlue>; break;
                    //case 12419: PX_AnimationChannel_FloatLerpQuaternionFloatA unk; break;
                    case 12833: PX_AnimationChannel_FloatMatrix3x4 mtx<bgcolor=cBlue>; break;
                    case 12835: PX_AnimationChannel_FloatLerpTranslationFloatLerpQuaternionFloat floatLerpTranslationFloatLerpQuaternionFloat<bgcolor=cBlue>; break;
                    case 12836: PX_AnimationChannel_FloatLerpTranslationFloatLerpQuaternionFloatLerpScale3Float floatLerpTranslationFloatLerpQuaternionFloatLerpScale3Float<bgcolor=cBlue>; break;
                    //case 12837: PX_AnimationChannel_FloatLerpTranslationFloatLerpQuaternionFloatA unk; break; //WIP
                    //case 12838: PX_AnimationChannel_FloatLerpTranslationFloatLerpQuaternionFloatLerpScale3FloatA unk; break;
                    case 12839: PX_AnimationChannel_FloatConstantTranslationFloatQuaternionFloatScale3Float floatConstantTranslationFloatQuaternionFloatScale3Float<bgcolor=cDkPurple>; break;
                    default: //Finicky way to "identify" and skip unknown chunks
                    Printf("Unsupported data type at index %i (%s).\n", i, EnumToString(dataTypeInfo)); //If () is returned, expect broken output
                    BigEndian();
                    if (FTell() != EOF)
                    {
                        struct
                        {
                            while (ReadUInt() != 8192 && ReadUInt() != 2105344 && ReadUInt() != 2101248) //this too bcz idk, warning: breaks on chunks with root type magic in them
                            {
                                byte unk;
                            }
                        } UnknownDataType<bgcolor=cRed>;
                        if (ver == 7)
                        {
                            FSkip(-2);
                        }
                    }
                    LittleEndian();
                    break;
                }
            }
            else
            {
                Printf("Animation node version %i is currently unsupported.\n", ver);
            }
            if (DEBUG_PRINT)
            {
                Printf("----Animation Node End  ----\n");
            }
            i++;
        } AnimationNode[animNodes]<optimize=false>; //or PES
    }
    else
    {
        Printf("No animation nodes.");
    }
} PXAnimation;