//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: PXTexture.bt
//   Authors: LolHacksRule
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "PXCommon.bt"

struct
{
    LittleEndian();
    PX_BinaryHeader PXBinaryHeader<bgcolor=cDkBlue>;
    uint32 ver; //7 in PVZ on MacOS/Amazon/iOS/Android standalone CDN, 9 in PFX3 first depot
    time_t exportDate; //Export date i32, seems to be a day before the table date
    Vector2_F32 initPos; //Prob or is it vec2F32 some count i32
    uint32 entries;
    if (entries)
    {
        time_t timestamp[entries+2]; //Export date i32, seems to be a day before the table date
        U32_StringEntry exportString;
        U32_StringEntry name;
        PX_Platform platform; //3 on iOS, 5 on Android, platform ID?
        uint32 unk2[2]; //Seems to be 0
    }
    uint32 entries2;
    struct
    {
        UByte_StringEntry name;
        Vector2_F32 unk;
    } Entry[entries2]<optimize=false>;
    uint32 particleEmitterShapes;
    struct
    {
        BigEndian(); //Why
        PX_TypeInfo rootTypeInfo; //0x00201000 is also a PES
        LittleEndian();
        UByte_StringEntry name;
        if (ver == 9) //Fix PFX3 (V9)
        {
            float unk3;
            UByte_StringEntry unk;
        }
        else
        {
            uint32 unk2;
        }
        PX_TypeInfo dataTypeInfo;
        switch (dataTypeInfo) //why
        {
            case 12291: PX_AnimationChannel_FloatLinearFloat floatLinFloat; break; //it fits :shrug:
            case 12292: PX_AnimationChannel_FloatBezierFloat floatBezFloat; break; //it fits :shrug:
            case 12294: PX_AnimationChannel_FloatConstantFloat floatConstantFloat; break; //it fits :shrug:
            case 12295: PX_AnimationChannel_FloatListFloat floatListFloat; break; //it fits :shrug:
            case 12354: PX_AnimationChannel_FloatBezierPoint3Float floatBezPoint3Float; break;
            case 12385: PX_AnimationChannel_FloatListBool floatListBool; break;
            case 12418: PX_AnimationChannel_FloatLerpQuaternionFloat animationChannelFloatLerpQuaternionFloat; break;
            case 12419: PX_AnimationChannel_FloatLerpQuaternionFloatA animationChannelFloatLerpQuaternionFloatA; break;
            case 12833: PX_AnimationChannel_FloatMatrix3x4 mtx; break;
            case 12835: PX_AnimationChannel_FloatLerpTranslationFloatLerpQuaternionFloat unk3; break;
            case 12836: PX_AnimationChannel_FloatLerpTranslationFloatLerpQuaternionFloatLerpScale3Float unk3; break;
            case 12837: PX_AnimationChannel_FloatLerpTranslationFloatLerpQuaternionFloatA unk3; break;
            case 12838: PX_AnimationChannel_FloatLerpTranslationFloatLerpQuaternionFloatLerpScale3FloatA unk3; break;
            case 12839: PX_AnimationChannel_FloatConstantTranslationFloatQuaternionFloatScale3Float unk3; break;
            default:
            /*if (FTell() != EOF)
            {
                while (ReadUInt() != 8192 && ReadUInt() != 2105344) //this too bcz idk
                {
                    byte pad;
                }
            }*/
            Printf("Unsupported data type. %u\n", dataTypeInfo); break;
        }
    } ParticleEmitterShape[particleEmitterShapes]<optimize=false>;
} PXAnimation;