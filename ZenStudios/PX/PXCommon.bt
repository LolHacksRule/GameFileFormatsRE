//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "../../LHR/Common.bt"

typedef enum <uint32>
{
    PX_BinaryDataType_None,
    PX_BinaryDataType_Package = 5,
    PX_BinaryDataType_Texture = 16,
    PX_BinaryDataType_CubeMapTexture = 18,
    PX_BinaryDataType_Model = 32,
    PX_BinaryDataType_Animation = 64,
} PX_BinaryDataType;

typedef enum <uint32> //Zen seems to use multiple hardcoded values to point to these why idk
{
    PX_TextureFormat_RGB888 = 20,
    PX_TextureFormat_RGBA8888 = 22,
    PX_TextureFormat_ARGB8888, //X360 but may be CTR too
    PX_TextureFormat_BGR888,
    PX_TextureFormat_PSP2_SWIZZLED_DXT1 = 60, //?
    PX_TextureFormat_DXT1 = 64,
    PX_TextureFormat_DXT2,
    PX_TextureFormat_DXT3,
    PX_TextureFormat_DXT4 = 68,
    PX_TextureFormat_XBOX360_SWIZZLED_DXT1 = 80,
    PX_TextureFormat_XBOX360_SWIZZLED_DXT4 = 84,
    PX_TextureFormat_PSP2_SWIZZLED_DXT5 = 100, //?
    PX_TextureFormat_PVRTC4BPP_LEGACY = 128, //2008 RollerCoaster, according to FX2, PVRTC2
    PX_TextureFormat_PVRTC2BPP_ALPHA, //2008 RollerCoaster, according to FX2, PVRTC2
    PX_TextureFormat_PVRTC4BPP = 130,
    PX_TextureFormat_PVRTC4BPP_ALPHA,
    PX_TextureFormat_ETC1_RGB = 138,
    PX_TextureFormat_ETC1ALPHA4BPP = 141, //Is this ETC1 or ETC2?, not in FX2
    PX_TextureFormat_CTR_SWIZZLED_BGR888 = 144,
    PX_TextureFormat_CTR_SWIZZLED_ARGB8888,
    PX_TextureFormat_CTR_SWIZZLED_ETC1,
    PX_TextureFormat_CTR_SWIZZLED_ETC1ALPHA4BPP,
    PX_TextureFormat_CTR_NORMAL_MAP_BGR888 = 160,
    PX_TextureFormat_CTR_NORMAL_MAP_ARGB8888,
    PX_TextureFormat_CTR_NORMAL_MAP_ETC1,
    PX_TextureFormat_CTR_NORMAL_MAP_ETC1ALPHA4BPP, 
    PX_TextureFormat_PSP2_SWIZZLED_RGBA8888 = 192,
    PX_TextureFormat_WIIU_SWIZZLED_RGBX8888 = 224,
    PX_TextureFormat_WIIU_SWIZZLED_RGBA8888,
    PX_TextureFormat_WIIU_SWIZZLED_BC1 = 240,
    PX_TextureFormat_WIIU_SWIZZLED_BC2 = 242,
    PX_TextureFormat_WIIU_SWIZZLED_BC3 = 244,
    PX_TextureFormat_DXT1_2 = 320,
    PX_TextureFormat_BC5S = 328, //CONFIRM
    PX_TextureFormat_NX_SWIZZLED_RGBA8888_SRGB = 352,
    PX_TextureFormat_NX_SWIZZLED_RGBA8888,
    PX_TextureFormat_NX_SWIZZLED_DXT1 = 368,
    PX_TextureFormat_NX_SWIZZLED_DXT3,
    PX_TextureFormat_NX_SWIZZLED_DXT5,
    PX_TextureFormat_NX_SWIZZLED_UNK = 373,
    PX_TextureFormat_NX_SWIZZLED_BC5S = 376,
} PX_TextureFormat;

typedef enum <uint32>
{
    PX_Platform_X360 = 1,
    PX_Platform_PS3,
    PX_Platform_iOS,
    PX_Platform_PSP2, //Vita
    PX_Platform_Android,
    PX_Platform_CTR, //3DS
    PX_Platform_D3D11,
    PX_Platform_OSX,
    PX_Platform_Cafe,
    PX_Platform_D3D9,
    PX_Platform_Orbis,
    PX_Platform_Durango,
    PX_Platform_NX, 
} PX_Platform;

typedef struct PX_BinaryHeader
{
    uint32 magic;
    PX_BinaryDataType PXBinaryDataType;
};

typedef struct PX_BoundingSphere
{
    Vector3_F32 center;
    float radius;
};

typedef struct PX_AABB_Float
{
    //LE?
    Vector3_F32 center;
    Vector3_F32 halfSz;
};

typedef struct PX_AnimationChannel_FloatConstantTranslationFloatQuaternionFloatScale3Float
{
    uint32 flags; //Variety, what do they do though
    Vector3_F32 translation;
    Vector4_F32 quaternion;
    Vector3_F32 scale;
    if (DEBUG_PRINT)
    {
        Printf("  Flags: %u, Translation (%f,%f,%f), Quaternion (%f,%f,%f,%f), Scale (%f,%f,%f)\n", flags, translation.X, translation.Y, translation.Z, quaternion.X, quaternion.Y, quaternion.Z, quaternion.W, scale.X, scale.Y, scale.Z);
    }
};

typedef struct PX_AnimationChannel_FloatListFloat
{
    uint32 values;
    struct
    {
        float time;
        float value;
        if (DEBUG_PRINT)
        {
            Printf("  Time: %f, Value: %f\n", time, value);
        }
    } Entry[values]<optimize=false>; //Would be seperate but simplify
};


typedef struct PX_AnimationChannel_FloatListBool
{
    uint32 values;
    struct
    {
        float time;
        Byte_Bool bool; //?
        if (DEBUG_PRINT)
        {
            Printf("  Time: %f, Bool: %s\n", time, EnumToString(bool));
        }
    } Entry[values]<optimize=false>;
};

typedef struct PX_AnimationChannel_FloatLerpQuaternionFloat
{
    uint32 values;
    struct
    {
        float time;
        Vector4_F32 val;
        if (DEBUG_PRINT)
        {
            Printf(" Time: %f, Value: (%f,%f,%f,%f)\n", time, val.X, val.Y, val.Z, val.W);
        }
    } Entry[values]<optimize=false>;
};

typedef struct PX_AnimationChannel_FloatLerpQuaternionFloatA //15 (single?), big endian floats at the end?
{
    float fps; //?
    uint32 flags;
    /*uint32 entries;
    Vector3_F32 trans;
    Vector3_F32 scale;
    struct
    {
        Vector4_F32 q; //qfloat
    } Entry[entries];*/
};

typedef struct PX_AnimationChannel_FloatLerpTranslationFloatLerpQuaternionFloat //Matching sizes but is it the right data
{
    uint32 values;
    struct
    {
        float time;
        Vector3_F32 trans;
        Vector4_F32 quat; //Should be four, quat
        if (DEBUG_PRINT)
        {
            Printf(" Time: %f, Translation: (%f,%f,%f), Quaternion: (%f,%f,%f,%f)\n", time, trans.X, trans.Y, trans.Z, quat.X, quat.Y, quat.Z, quat.W);
        }
    } Entry[values]<optimize=false>;
};

typedef struct PX_AnimationChannel_FloatLerpTranslationFloatLerpQuaternionFloatLerpScale3Float //Matching sizes (44bytes) but is it the right data
{
    uint32 values;
    struct
    {
        float time;
        Vector3_F32 trans;
        Vector4_F32 rot; //Should be four, quat
        Vector3_F32 scale; //Def right
        if (DEBUG_PRINT)
        {
            Printf(" Time: %f, Translation: (%f,%f,%f), Rotation: (%f,%f,%f,%f), Scale: (%f,%f,%f)\n", time, trans.X, trans.Y, trans.Z, quat.X, quat.Y, quat.Z, quat.W, scale.X, scale.Y, scale.Z);
        }
    } Entry[values]<optimize=false>;
};

typedef struct PX_AnimationChannel_FloatLerpTranslationFloatLerpQuaternionFloatA
{
    float fps; //def right, seems to always be 30
    Vector3_F32 tMin;
    Vector3_F32 tScale;
    uint32 flags;
    if (flags) //?
    {
        uint32 unk;
    }
    Vector3_F32 scale;
    /*
    uint32 unk2;
    struct
    {
        Vector3_F32 trans;
        Vector4_F32 quat;
    } e[unk2];*/
    //We know at least a float is here
};

typedef struct PX_AnimationChannel_FloatMatrix3x4 //52 bytes
{
    uint32 values;
    struct
    {
        float time;
        Vector3_F32 mtx[4];
        if (DEBUG_PRINT)
        {
            Printf(" Time: %f, Matrix: ([%f,%f,%f],[%f,%f,%f],[%f,%f,%f],[%f,%f,%f])\n", time, mtx[0].X, mtx[0].Y, mtx[0].Z, mtx[1].X, mtx[1].Y, mtx[1].Z, mtx[2].X, mtx[2].Y, mtx[2].Z, mtx[3].X, mtx[3].Y, mtx[3].Z);
        }
    } Entry[values]<optimize=false>;
};

typedef struct PX_AnimationChannel_FloatMaxTcbFloat //Haven't seen it used
{
    uint32 values;
    struct
    {
        float time;
        float val;
        float tension;
        float continuity;
        float bias;
        Vector2_F32 ease; //in/out
        if (DEBUG_PRINT)
        {
            Printf(" Time: %f, Value: %f, Tension: %f, Continuity: %f, Bias: %f, Ease In: %f, Ease Out: %f\n", time, val, tension, continuity, bias, ease.X, ease.Y);
        }
    } Entry[values]<optimize=false>;
};

typedef struct PX_AnimationChannel_FloatLinearPoint3Float 
{
    uint32 values;
    struct
    {
        float time;
        Vector3_F32 val;
        if (DEBUG_PRINT)
        {
            Printf(" Time: %f, Value: (%f,%f,%f)\n", time, val.X, val.Y, val.Z);
        }
    } Entry[values]<optimize=false>;
};

typedef struct PX_AnimationChannel_FloatMaxTcbPoint3Float 
{
    uint32 values;
    struct
    {
        float time;
        Vector3_F32 val;
        float tension;
        float continuity;
        float bias;
        Vector2_F32 ease; //in/out
        if (DEBUG_PRINT)
        {
            Printf(" Time: %f, Value: (%f,%f,%f), Tension: %f, Continuity: %f, Bias: %f, Ease In: %f, Ease Out: %f\n", time, val.X, val.Y, val.Z, tension, continuity, bias, ease.X, ease.Y);
        }
    } Entry[values]<optimize=false>;
};

typedef struct PX_AnimationChannel_FloatSlerpQuaternionFloat
{
    uint32 values;
    struct
    {
        float time;
        Vector4_F32 val;
        if (DEBUG_PRINT)
        {
            Printf(" Time: %f, Value: (%f,%f,%f)\n", time, val.X, val.Y, val.Z, val.W);
        }
    } Entry[values]<optimize=false>;
};

typedef struct PX_AnimationChannel_FloatConstantFloat //Pointless struct but I'd rather label structs so it's easier to idenity
{
    float time;
    if (DEBUG_PRINT)
    {
        Printf(" Time: %f\n", time);
    }
};

typedef struct PX_AnimationChannel_FloatBezierFloat
{
    uint32 values;
    struct
    {
        Vector4_F32 time;
        Vector4_F32 value;
        if (DEBUG_PRINT)
        {
            Printf(" Time: (%f,%f,%f,%f), Value: (%f,%f,%f,%f)\n", time.X, time.Y, time.Z, time.W, value.X, value.Y, value.Z, value.W);
        }
    } Entry[values]<optimize=false>;
};

typedef struct PX_AnimationChannel_FloatLinearFloat
{
    uint32 values;
    struct
    {
        float time;
        float val;
        if (DEBUG_PRINT)
        {
            Printf(" Time: %f, Value: %f\n", time, val);
        }
    } Entry[values]<optimize=false>;
};

typedef struct PX_AnimationChannel_FloatBezierPoint3Float_SegmentChannel
{
    Vector4_F32 time;
    Vector4_F32 value;
    if (DEBUG_PRINT)
    {
        Printf(" Segment Channel\n  Time: (%f,%f,%f,%f), Value: (%f,%f,%f,%f)\n", time.X, time.Y, time.Z, time.W, value.X, value.Y, value.Z, value.W);
    }
};

typedef struct PX_AnimationChannel_FloatBezierPoint3Float
{
    uint32 values;
    struct
    {
        PX_AnimationChannel_FloatBezierPoint3Float_SegmentChannel channel[3]<optimize=false>; //XYZ
    } Entry[values]<optimize=false>;
};

typedef struct PX_AnimationChannel_FloatLerpTranslationFloatLerpQuaternionFloatLerpScale3FloatA //184/216 bytes?
{
    float fps;
    Vector3_F32 tMin;
    Vector3_F32 tScale;
    Vector3_F32 sMin;
    Vector3_F32 sScale;
    //uint32 test; //?
    /*struct
    {
        Vector3_F32 trans;
        Vector4_F32 quat;
        Vector3_F32 scale;
    } Entry[test];*/
};

typedef enum <uint32> //Shoutouts to Zen for making this a confusing and messy challenge, unintentionally idk, Key means multiple usually
{
    PX_TypeInfo_Space = 4096, //Model
    //Transformable
    PX_TypeInfo_Transformable, //Model
    PX_TypeInfo_Transformable_Mesh, //Model BE?
    PX_TypeInfo_Transformable_Sphere = 4100, //Model
    PX_TypeInfo_Transformable_MaterialLibrary, //Model
    PX_TypeInfo_Transformable_CorneredUnitCube, //Model
    PX_TypeInfo_Transformable_MaxBox, //Model
    PX_TypeInfo_Transformable_MaxCapsule, //Model
    PX_TypeInfo_Transformable_MaxRect, //Model
    PX_TypeInfo_Transformable_LineStrips3 = 4128, //Model
    PX_TypeInfo_Transformable_Spline3, //Model
    //Space
    PX_TypeInfo_Space_Joint = 4144, //Model
    PX_TypeInfo_Space_Light = 4352, //Model
    PX_TypeInfo_Space_DirectionalLight, //Model
    PX_TypeInfo_Space_AmbientLight, //Model
    //Camera
    PX_TypeInfo_Camera = 4608, //Model
    PX_TypeInfo_OrthographicCamera, //Model
    PX_TypeInfo_PerspectiveCamera, //Model
    //Particle Emitter Shapes
    PX_TypeInfo_ParticleEmitterShape = 8192,
    PX_TypeInfo_ParticleEmitterShape_OmniZ,
    PX_TypeInfo_ParticleEmitterShape_PlaneZ,
    PX_TypeInfo_ParticleEmitterShape_DiskJetZ,
    PX_TypeInfo_ParticleEmitterShape_CylinderSurface,
    PX_TypeInfo_ParticleEmitterShape_Sphere,
    //Animation Channel
    PX_TypeInfo_AnimationChannel = 12288, //Model (?)
    PX_TypeInfo_AnimationChannel_Float, 
    PX_TypeInfo_AnimationChannel_Floatx2, //Unused in PVZ
    PX_TypeInfo_AnimationChannel_FloatLinearFloat,
    PX_TypeInfo_AnimationChannel_FloatBezierFloat,
    PX_TypeInfo_AnimationChannel_FloatMaxTcbFloat, //Unused in PVZ
    PX_TypeInfo_AnimationChannel_FloatConstantFloat, //Unused in PVZ
    PX_TypeInfo_AnimationChannel_FloatListFloat,
    PX_TypeInfo_AnimationChannel_FloatMaxNoiseFloat, //Unused in PVZ
    PX_TypeInfo_AnimationChannel_FloatPoint3Float = 12352,
    PX_TypeInfo_AnimationChannel_FloatLinearPoint3Float,
    PX_TypeInfo_AnimationChannel_FloatBezierPoint3Float,
    PX_TypeInfo_AnimationChannel_FloatMaxTcbPoint3Float, //Unused in PVZ
    PX_TypeInfo_AnimationChannel_FloatBool = 12384, //Unused in PVZ
    PX_TypeInfo_AnimationChannel_FloatListBool,
    PX_TypeInfo_AnimationChannel_FloatQuaternionFloat = 12416, //Unused in PVZ
    PX_TypeInfo_AnimationChannel_FloatSlerpQuaternionFloat, //Unused in PVZ
    PX_TypeInfo_AnimationChannel_FloatLerpQuaternionFloat, //Unused in PVZ
    PX_TypeInfo_AnimationChannel_FloatLerpQuaternionFloatA,
    PX_TypeInfo_AnimationChannel_FloatChannel3 = 12800, //May be in a model
    PX_TypeInfo_AnimationChannel_FloatIndependentEularAngles3Float, //May be in a model
    PX_TypeInfo_AnimationChannel_FloatTransform = 12832, //May be in a model
    PX_TypeInfo_AnimationChannel_FloatMatrix3x4,
    PX_TypeInfo_AnimationChannel_FloatLerpTranslationFloatLerpQuaternionFloat = 12835,
    PX_TypeInfo_AnimationChannel_FloatLerpTranslationFloatLerpQuaternionFloatLerpScale3Float,
    PX_TypeInfo_AnimationChannel_FloatLerpTranslationFloatLerpQuaternionFloatA,
    PX_TypeInfo_AnimationChannel_FloatLerpTranslationFloatLerpQuaternionFloatLerpScale3FloatA, //why
    PX_TypeInfo_AnimationChannel_FloatConstantTranslationFloatQuaternionFloatScale3Float,
    //Effect Element
    PX_TypeInfo_EffectElement = 16384, //May be in a model
    PX_TypeInfo_EffectElement_ParticleEmitter,
    PX_TypeInfo_EffectElement_Sprite3D,
    //Material
    PX_TypeInfo_Material = 20480,
    PX_TypeInfo_ShaderMaterial,
    PX_TypeInfo_ShaderMaterial_MaxDirectXEffectMaterial = 20496,
    PX_TypeInfo_ShaderMaterial_EffectMaterial = 20552,
    //Shader
    PX_TypeInfo_Shader = 24576,
    PX_TypeInfo_SimpleShader,
    PX_TypeInfo_SolidShader,
    PX_TypeInfo_TextureShader,
    //Mesh Surface Modifier
    PX_TypeInfo_MeshSurfaceModifier = 36864,
    PX_TypeInfo_MeshSurfaceModifier_Morph,
    PX_TypeInfo_MeshSurfaceModifier_Skin,
    //Force Field
    PX_TypeInfo_ForceField = 40960,
    PX_TypeInfo_ForceField_Constant,
    PX_TypeInfo_ForceField_PointQuadraticDecay,
    PX_TypeInfo_ForceField_PointExponentialDecay,
    //Model Component
    PX_TypeInfo_ModelComponent = 45056,
    PX_TypeInfo_ModelComponentCollection_Mesh, //?
    PX_TypeInfo_ModelComponentCollection_Raw = 45311,
    PX_TypeInfo_ModelComponentCollection_Skeleton,   
    PX_TypeInfo_ModelComponentCollection_ShaderProgram = 45568,
    //Mesh
    PX_TypeInfo_Mesh = 49152,
    PX_TypeInfo_GeneralMesh,
    PX_TypeInfo_MultiStreamStaticMesh = 49217, //101 bytes?
    PX_TypeInfo_MultiStreamSkeletalMesh = 49234,
    //Transformable Constraint
    PX_TypeInfo_TransformableConstraint = 53248,
    PX_TypeInfo_TransformableConstraint_LookAt,
    //Vertex Program
    PX_TypeInfo_VertexProgram = 61440,
    PX_TypeInfo_VertexProgram_ClipSpacePush,
    PX_TypeInfo_VertexProgram_ModelSpacePush,
    PX_TypeInfo_VertexProgram_CartoonPush,
    //Float creators
    PX_TypeInfo_Spline3Float = 65536,
    PX_TypeInfo_BezierSpline3Float,
} PX_TypeInfo;