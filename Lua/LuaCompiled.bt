//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: LuaCompiled.bt
//   Authors: LolHacksRule
//   Version: 1.2
//   Purpose: Reading compiled Lua files
//  Category: Reverse Engineering
// File Mask: Lua*
//  ID Bytes: 1B 4C 75
//   History: 
//------------------------------------------------

//http://domoticx.com/lua-bytecode-ontcijferen-luac/
//https://www.twblogs.net/a/5b8c24e42b7177188330c536/?lang=zh-cn
//http://files.catwell.info/misc/mirror/lua-5.2-bytecode-vm-dirk-laurie/lua52vm.html
//https://github.com/viruscamp/luadec/blob/master/ChunkSpy/
//https://web.archive.org/web/20201126175122/http://luaforge.net/projects/chunkspy/
//https://gist.github.com/seanjensengrey/e198380afc64f0eb17a47512b48f040f
//Original Luac.bt

//ONLY SUPPORTS NAMELY 5.0-5.1 NOT 5.2, MAY SUPPORT 4.0

#include "../LHR/Common.bt"

local string luaBoolStr <hidden=true> = "";
local uint DEBUG_PRINT <hidden=true> = 0; //Use this to print debug info

struct LuaProto;

typedef enum <byte>
{
    PLV_Null,
    PLV_Bool,
    PLV_Decimal = 3,
    PLV_Number,
    PLV_String,
} PopCap_Custom_LuaVarType;

typedef enum <byte>
{
    LV_Bool = 1,
    LV_Int = 2,
    LV_Decimal = 3,
    LV_String,
    LV_Number,
} LuaVarType;

typedef enum <uint32>
{
    LOP_MOVE,
    LOP_LOADK,
    LOP_LOADBOOL,
    LOP_SETGLOBAL = 0x000007,
    LOP_RETURN = 0x0000801B,
} LuaOpCode;

typedef enum <uint32>
{
    PLOP_LOADBOOL = 0x000002,
    PLOP_LOADNIL,
    PLOP_GETGLOBAL = 0x000005,
    PLOP_SETGLOBAL = 0x000007,
    PLOP_NEWTABLE = 0x00000A,
    PLOP_DEFGLOBAL = 0x000027,
    PLOP_CLOSURE = 0x000030,
    PLOP_RETURN = 0x00801D,
} PopCap_Custom_LuaOpCode;

typedef enum <byte>
{
    LuaVersion_40 = 0x40,
    LuaVersion_50 = 0x50,
    LuaVersion_51,
    LuaVersion_52,
    LuaVersion_53,
    PopCap_Custom_Lua5 = 0x56,
} LuaVersion;

typedef struct LuaCompiledHeader
{
    uint32 magic; // x1BLua
    LuaVersion ver; //P, Q and V (PopLua)
    //check for ChunkSpy 5.1 Lua bcz sure broken rn
    /*FSkip(1);
    byte csChk<hidden=true>;
    FSkip(-2);
    */
    if (ver > 'P' /*&& csChk != 0x04*/)
    {
        byte format; //0: Official, 1: Modified (like PopLua)
    }
    byte endian; //0: Big, 1: Little (For PopLua, always LE, 2 uses unicode [Wrapper])
    if (endian == 0 && ver != PopCap_Custom_Lua5)
    {
        BigEndian();
    }
    if (endian == 1)
    {
        LittleEndian();
    }
    byte intSz;
    byte size_t_sz;
    byte instruction_sz;
    byte lua_number_sz;
    if (ver >= 'P' /*&& csChk != 0x04*/)
    {
        byte integralFlag;
    }
    if (ver < 'Q' || ver == 'V' /*&& (ver > 'P' && csChk != 0x04)*/)
    {
        byte asz;
        byte bsz;
        byte csz;
        //double testNum; //PI
    }
    /*if (ver > 'P' && csChk != 0x04)
    {
        byte integralFlag;
    }*/
    if (ReadInt64() == 4719198358794865078 || ReadInt64() == 4719198358651011072) // do this so 5.0 and 5.1 don't break
    {
        double testNum;
    }
};

typedef struct LuaString
{
    if (hdr.size_t_sz == 8)
    {
        uint64 stringSize;
    }
    else
    {
        uint32 stringSize;
    }
    if (stringSize > 0)
    {
        if (hdr.endian == 2)
        {
            wchar_t lstring[stringSize];
        }
        else
        {
            char lstring[stringSize];
        }
        if (DEBUG_PRINT == 1 && stringSize > 0)
        {
            Printf("%s\n", lstring);
        }
    }
};

typedef struct LuaVar
{
    if (hdr.ver == PopCap_Custom_Lua5)
    {
        PopCap_Custom_LuaVarType luaVarType;
        if (luaVarType == PLV_Number)
        {
            uint32 luaI32;
            if (DEBUG_PRINT == 1)
            {
                Printf("%i\n", luaI32);
            }
        }
        else if (luaVarType == PLV_String)
        {
            LuaString luaStr;
        }
        else if (luaVarType == PLV_Decimal)
        {
            if (hdr.lua_number_sz == 6)
            {
                double luaDec;
                if (DEBUG_PRINT == 1)
                {
                    Printf("%lf\n", luaDec);
                }
            }
            else
            {
                float luaDec;
                if (DEBUG_PRINT == 1)
                {
                    Printf("%f\n", luaDec);
                }
            }
        }
        else if (luaVarType == PLV_Bool)
        {
            byte luaBool;
            if (DEBUG_PRINT == 1)
            {
                if (luaBool == 0x01)
                {
                    luaBoolStr = "true";
                }
                else if (luaBool == 0x01)
                {
                    luaBoolStr = "false";
                }
                Printf("%s\n", luaBoolStr);
            }
        }
    }
    else
    {
        LuaVarType luaVarType;
        if (luaVarType == LV_Number)
        {
            uint32 luaI32; //Will change later
            if (DEBUG_PRINT == 1)
            {
                Printf("%i\n", luaI32);
            }
        }
        else if (luaVarType == LV_String)
        {
            LuaString luaStr;
        }
        else if (luaVarType == LV_Decimal)
        {
            if (hdr.lua_number_sz > 4)
            {
                double luaDec;
                if (DEBUG_PRINT == 1)
                {
                    Printf("%f\n", luaDec);
                }
            }
            else
            {
                float luaDec;
                if (DEBUG_PRINT == 1)
                {
                    Printf("%f\n", luaDec);
                }
            }
        }
        else if (luaVarType == LV_Bool)
        {
            byte luaBool;
            if (DEBUG_PRINT == 1)
            {
                if (luaBool == 0x01)
                {
                    luaBoolStr = "true";
                }
                else
                {
                    luaBoolStr = "false";
                }
                Printf("%s\n", luaBoolStr);
            }
        }
    }
};

typedef struct LuaLines
{
    uint32 lines;
    if (lines > 0)
    {
        uint32 line[lines];
    }
};

typedef struct LuaByteCode
{
    uint32 bytecodesz;
    if (hdr.ver == PopCap_Custom_Lua5)
    {
        PopCap_Custom_LuaOpCode plop[bytecodesz];
    }
    else
    {
        LuaOpCode lop[bytecodesz];
    }
};

typedef struct LuaConstants
{
    uint32 constants;
    if (constants > 0)
    {
        LuaVar lcv[constants]<optimize=false>;
    }
};

typedef struct LuaLocals
{
    uint32 locals;
    if (locals > 0)
    {
        struct LocalEntry
        {
            /*if (hdr.ver > 'P' && hdr.ver != 'V')
            {
                LuaVar lv;
            }
            else*/
            {
                LuaString locString;
                uint32 startPc;
                uint32 endPc;
            }
        } le[locals]<optimize=false>;
    }
};

typedef struct LuaUpValues
{
    uint32 upVVars;
    if (upVVars > 0)
    {
        LuaString upVString[upVVars]<optimize=false>;
    }
};

typedef struct (string level) {
    uint32 sizep <format=hex>;
    local uint32 sz = sizep;
    local uint32 i = 0;
    local string s_level;
    while (sz-- > 0) {
        SPrintf(s_level, "%s_%d", level, i++);
        LuaProto proto(s_level);
    };
} LuaProtos<optimize=false>;

typedef struct LuaProtoHeader
{
    uint32 linedef;
    if (hdr.ver > 'P')
    {
        uint32 endline;
    }
    byte nupvs;
    byte numparams;
    byte vararg;
    byte maxStackSz;
};

typedef struct(string level) {
    local string level_ = level;
    LuaString srcName<bgcolor=cGreen>;
    LuaProtoHeader lph;
    if (hdr.ver < LuaVersion_51 || hdr.ver == PopCap_Custom_Lua5)
    {
        LuaLines Lines50;
        LuaLocals Locals50;
        LuaUpValues UpValues50;
        LuaConstants Constants50;
        LuaProtos Protos50(level_)<bgcolor=cLtBlue>;
        LuaByteCode ByteCode50<bgcolor=cRed>;
    }
    else
    {
        LuaByteCode ByteCode51<bgcolor=cRed>;
        LuaConstants Constants51;
        LuaProtos Protos51(level_)<bgcolor=cLtBlue>;
        LuaLines Lines51;
        LuaLocals Locals51;
        LuaUpValues UpValues51;
    }
} LuaProto <read=LuaProtoRead>;

string LuaProtoRead(LuaProto& proto) { //Borrowed from Luac.bt, ONLY here so subfunctions don't break
    return "function level " + proto.level_;
}


struct LuaCompiled
{
    FSkip(4);
    byte verChk<hidden=true>;
    FSkip(-5);
    if (verChk == 'P') //50 / 5.0
    {
        Printf("Lua 5.0 files are WIP!\n");
        //break;
    }
    if (verChk == 'R') //52 / 5.2
    {
        Printf("Please use Luac.bt instead.\n");
        break;
    }
    if (verChk == 'V') //PopCap/SAF PopLua 5.0
    {
        Printf("PopCap LUC files are WIP!\n");
        //break;
    }
    LuaCompiledHeader hdr<bgcolor=cBlue>;
    LuaProto proto("0")<bgcolor=cPurple>;
} LUAC;