//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: KA3DBinaryDATFile.bt
//   Authors: LolHacksRule
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "../../LHR/Common.bt"

//Viewing of data files from Rovio's proprietary version of the KA3D Engine (Fusion).

//local uint i<hidden = true> = 0;
local uint i2<hidden = true> = 0;

//MANUAL FIXES FOR HEADERLESS BINARIES, ONLY SET 1, ONLY TESTED ON DARKEST FEAR iOS AND ANGRY BIRDS 1.2.2!
local uint forceHeaderlessText <hidden = true> = 0;
local uint forceHeaderlessFont <hidden = true> = 0;
local uint forceHeaderlessSprite <hidden = true> = 0;

typedef enum <DWORD>
{
    KA3D = 1262564164,
    KA3D_RVIO = 1381386575,
    CompoSprite = 1129270608,
    Text = 1413830740,
    LanguageData = 1279541588,
    LabelIDs = 1279870035,
    TextGroup = 1415071568,
    Sprite = 1397772884,
    Font = 1179602516,
} blockType;

typedef struct
{
    blockType contentBlockType;
    DWORD blockSize; //-4
    //SHORT ver;
} contentBlockHeader;

typedef struct
{
    local string theLabelIDString = LIDS.LIDSd.LIDStrings.theLabelIDStr[i].theString;
    short textStringSize<hidden=true>;
    if (textStringSize >= 1)
    {
        char theTextString[textStringSize];
    }
    else
    {
        Printf("TextString %i is empty!\n", i);
    }
} textString;

typedef struct
{
    contentBlockHeader baseCompositeHdr;
    struct COMPData
    {
        SHORT ver;
        SHORT texCnt;
        struct TextureData
        {
            for (i; i < texCnt; i++)
            {
                I16_StringEntry texNameStr;
                short subTexCnt;
                for (i2 = 0; i2 < subTexCnt; i2++)
                {
                    I16_StringEntry subTexNameStr;
                    struct SubTexParam
                    {
                        short unk[2]; //First one is width?
                        if (hdr == KA3D_RVIO)
                        {
                            short unk2;
                            float unk3[3];
                            int16 unk4;
                        }
                    } prm;
                }
                if (hdr != KA3D_RVIO && ver != 1) //Ver 1 doesn't use padding so here's a fix for legacy DAT
                {
                    FSkip(2);
                }
            }
        } tdata;
        FSkip(2);
    } compD;
} cmpBlock;

typedef struct
{
    if (forceHeaderlessText != 1)
    {
        contentBlockHeader baseTextDataBlockHdr;
    }
    struct TextBlockBin
    {
        if (forceHeaderlessText != 1)
        {
            SHORT ver;
        }
        else
        {
            byte dmy;
        }
        struct LanguageData
        {
            if (forceHeaderlessText != 1)
            {
                contentBlockHeader languageDataBlockHdr;
            }
            else
            {
                DWORD blockDataSize;
            }
            struct LDATData
            {
                if (forceHeaderlessText != 1)
                {
                    SHORT languageCount;
                }
                else
                {
                    byte languageCount;
                    //byte dmy;
                }
                struct Languages
                {
                    for (i; i < languageCount; i++)
                    {
                        //struct Language
                        //{
                            I16_StringEntry theLanguageStr;
                        //} ldat_lang;
                    }
                } langs;
            } LDATd;
        } LDAT;
        struct LabelIDs
        {
            if (forceHeaderlessText != 1)
            {
                contentBlockHeader labelIDDataBlockHdr;
            }
            struct LIDSData
            {
                SHORT labels;
                struct LabelIDStrings
                {
                    for (i = 0; i < labels; i++)
                    {
                        //struct LabelIDString
                        //{
                            I16_StringEntry theLabelIDStr;
                        //} lid_str;
                    }
                } LIDStrings;
            } LIDSd;
        } LIDS;
        if (forceHeaderlessText == 1)
        {
            struct OffsetTable
            {
                for (i2; i2 < LDAT.LDATd.languageCount; i2++)
                {
                    int32 offset; //from the current pos, this is the offset
                }
            } offtbl;
        }
        struct TextGroups
        {
            for (i2 = 0; i2 < LDAT.LDATd.languageCount; i2++)
            {
                struct TextGroup
                {
                    local string theLanguage = LDAT.LDATd.langs.theLanguageStr[i2].theString;
                    if (forceHeaderlessText != 1)
                    {
                        contentBlockHeader textGroupBlockHdr;
                    }
                    struct TextGroupData
                    {
                        for (i = 0; i < LIDS.LIDSd.labels; i++)
                        {
                            //struct TextGroupString
                            //{
                                //local string theLabelID = LIDS.LIDSd.LIDStrings.lid_str[i].theStr.theString;
                                textString TextGroupString;
                            //} txgp_str;
                        }
                    } txgpd;
                } TXGP;
            }
        } textGroups;
    } TextBlockBinary;
} TEXTBlock<bgcolor=cGreen>;

typedef struct
{
    if (forceHeaderlessSprite != 1)
    {
        contentBlockHeader baseSpriteBlockHdr;
    }
    struct SpriteBlockBin
    {
        if (forceHeaderlessSprite != 1)
        {
            SHORT ver;
        }
        I16_StringEntry txtrFNameStr;
        SHORT maxTextures;
        struct Textures
        {
            Printf("Texture Param:\n");
            for (i = 0; i < maxTextures; i++)
            {
                Printf("--------TEXTURE %i START--------\n", i);
                struct Texture
                {
                    I16_StringEntry theTexNameStr;
                    Printf("Name: %s\n", theTexNameStr.theString);
                    struct Param
                    {
                        SHORT xOff;
                        Printf("X Offset: %d\n", xOff);
                        SHORT yOff;
                        Printf("Y Offset: %d\n", yOff);
                        SHORT width;
                        Printf("Width: %d\n", width);
                        SHORT height;
                        Printf("Height: %d\n", height);
                        SHORT widthHalved;
                        Printf("Width Halved: %d\n", widthHalved);
                        SHORT heightHalved;
                        Printf("Height Halved: %d\n", heightHalved);
                    } prm;
                    Printf("--------TEXTURE %i END--------\n", i);
                } txtr;
            }
        } txtrs;
    } SpriteBlockBinary;
} SPRTBlock;

typedef struct
{
    if (forceHeaderlessFont != 1)
    {
        contentBlockHeader baseFontBlockHdr;
    }
    struct FontBlockBin
    {
        if (forceHeaderlessFont != 1)
        {
            SHORT ver;
        }
        I16_StringEntry txtrFNameStr;
        DWORD unk;
        SHORT maxTextures;
        for (i = 0; i < maxTextures; i++)
        {
            //I16_StringEntry theTexNameStr;
            struct TParam2 //As of a new format, this changed I think
            {
                SHORT xOff;
                SHORT yOff;
                SHORT width;
                SHORT height;
                SHORT unk2[2];
            } prm2;
        }
    } FontBlockBinary;
} FONTBlock;

struct KA3DBinary
{
    BigEndian();
    //Check for headerless file
    byte headerlessChk<hidden=true>; //if you find 0, it's the old headerless format
    FSkip(-1);
    if (headerlessChk == 0)
    {
        if (forceHeaderlessText == 1)
        {
            Printf("Forcing headerless Text block detection!\n");
            TEXTBlock HeaderlessTextBlock;
        }
        else if (forceHeaderlessSprite == 1)
        {
            Printf("Forcing headerless Sprite block detection!\n");
            SPRTBlock HeaderlessSpriteBlock;
        }
        else if (forceHeaderlessFont == 1)
        {
            Printf("Forcing headerless Font block detection!\n");
            FONTBlock HeaderlessFontBlock;
        }
        else
        {
            Printf("Headerless file detected! Please modify the manual flags to detect its data.\n");
        }
    }
    else
    //Detect newer KA3D format
    {
        contentBlockHeader baseHdr;
        DWORD tmpChk<hidden=true>;
        FSkip(-4);    
        if (tmpChk == CompoSprite)
        {
            cmpBlock CompoSpriteBlock;
        }
        if (tmpChk == Text)
        {
            TEXTBlock TextBlock;
        }
        if (tmpChk == Sprite)
        {
            SPRTBlock SpriteBlock;
        }
        if (tmpChk == Font)
        {
            FONTBlock FontBlock;
        }
    }
} KA3D_DAT<bgcolor=cYellow>;