//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: KA3DBinaryDATFile.bt
//   Authors: LolHacksRule
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

//Viewing of data files from Rovio's proprietary version of the KA3D Engine (Fusion).

local uint i<hidden = true> = 0;
local uint i2<hidden = true> = 0;

typedef enum <DWORD>
{
    KA3D = 1262564164,
    KA3D_RVIO = 1381386575,
    Composite = 1129270608,
    Text = 1413830740,
    LanguageData = 1279541588,
    LabelIDs = 1279870035,
    TextGroup = 1415071568,
    Sprite = 1397772884,
    Font = 1179602516,
} blockType;

typedef struct
{
    blockType contentBlockType;
    DWORD blockSize; //-4
    //SHORT ver;
} baseCblkHdr;

typedef struct
{
    short stringSize<hidden=true>;
    if (stringSize >= 1)
    {
        char theString[stringSize];
    }
    else
    {
        Printf("String %i is empty!\n", i);
    }
} genericString;

typedef struct
{
    baseCblkHdr baseHdr;
    SHORT ver;
    SHORT texCnt;
    struct TextureData
    {
        for (i; i < texCnt; i++)
        {
            genericString texNameStr;
            short subTexCnt;
            for (i2 = 0; i2 < subTexCnt; i2++)
            {
                genericString subTexNameStr;
                struct SubTexParam
                {
                    short unk[2]; //First one is width?
                    if (hdr == KA3D_RVIO)
                    {
                        short unk2;
                        float unk3[3];
                        int16 unk4;
                    }
                } prm;
            }
            if (hdr != KA3D_RVIO && ver != 1) //Ver 1 doesn't use padding so here's a fix for legacy DAT
            {
                FSkip(2);
            }
        }
    } tdata;
    FSkip(2);
} cmpBlock;

typedef struct
{
    baseCblkHdr baseHdr;
    struct TextBlockBin
    {
        SHORT ver;
        struct LanguageData
        {
            blockType hdr;
            DWORD blockDataSize;
            SHORT languageCount;
            struct Languages
            {
                for (i; i < languageCount; i++)
                {
                    genericString theLang;
                }
            } langs;
        } LDAT;
        struct LabelIDs
        {
            blockType hdr;
            DWORD blockSize;
            SHORT labels;
            struct LabelIDStrings
            {
                for (i = 0; i < labels; i++)
                {
                    genericString theStr;
                }
            } LIDStrings;
        } LIDS;
        for (i2 = 0; i2 < LDAT.languageCount; i2++)
        {
            struct TextGroupChunk
            {
                //local string theLanguage = LDAT.langs[i].theLang[i];
                blockType hdr;
                DWORD blockSize;
                for (i = 0; i < LIDS.labels; i++)
                {
                    genericString theStr;
                }
            } TXGP;
        }
    } TextBlockBinary;
} TEXTBlock<bgcolor=cGreen>;

typedef struct
{
    baseCblkHdr baseHdr;
    struct SpriteBlockBin
    {
        SHORT ver;
        genericString txtrFNameStr;
        SHORT maxTextures;
        struct Textures
        {
            Printf("Texture Param:\n");
            for (i = 0; i < maxTextures; i++)
            {
                Printf("--------TEXTURE %i START--------\n", i);
                struct Texture
                {
                    genericString theTexNameStr;
                    Printf("Name: %s\n", theTexNameStr.theString);
                    struct Param
                    {
                        SHORT xOff;
                        Printf("X Offset: %d\n", xOff);
                        SHORT yOff;
                        Printf("Y Offset: %d\n", yOff);
                        SHORT width;
                        Printf("Width: %d\n", width);
                        SHORT height;
                        Printf("Height: %d\n", height);
                        SHORT unk2[2];
                    } prm;
                    Printf("--------TEXTURE %i END--------\n", i);
                } txtr;
            }
        } txtrs;
    } SpriteBlockBinary;
} SPRTBlock;

typedef struct
{
    baseCblkHdr baseHdr;
    struct FontBlockBin
    {
        SHORT ver;
        genericString txtrFNameStr;
        DWORD unk;
        SHORT maxTextures;
        for (i = 0; i < maxTextures; i++)
        {
            //genericString theTexNameStr;
            struct TParam2
            {
                SHORT xOff;
                SHORT yOff;
                SHORT width;
                SHORT height;
                SHORT unk2[2];
            } prm2;
        }
    } FontBlockBinary;
} FONTBlock;

struct KA3DBinary
{
    BigEndian();
    blockType hdr;
    DWORD mainBlockDataSize;
    DWORD tmpChk<hidden=true>;
    FSkip(-4);
    if (tmpChk == Composite)
    {
        cmpBlock CompositeBlock;
    }
    if (tmpChk == Text)
    {
        TEXTBlock TextBlock;
    }
    if (tmpChk == Sprite)
    {
        SPRTBlock SpriteBlock;
    }
    if (tmpChk == Font)
    {
        FONTBlock FontBlock;
    }
} KA3D_DAT<bgcolor=cYellow>;