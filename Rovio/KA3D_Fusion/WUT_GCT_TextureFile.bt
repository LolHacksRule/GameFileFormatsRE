//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "../../Nintendo/NintendoWare/caFe/GX2/NW4F_GX2_Standard.bt"

local uint isWiiU = 0;
local uint isWii = 0;

typedef enum <uint32>
{
    MipHeader = 1296650344,
    WiiUTexture = 1465209888,
    GameCubeTexture_NotReally = 1195594784
} contentType;

typedef enum <uint16>
{
    RGBA8888_Paletized = 6,
    RGBA4444_Paletized = 8,
    Pal8,
} GCTTexFmt;

typedef enum <uint16>
{
    IA8,
    RGB565,
    RGB5A3,
} GCTPalFmt;

typedef struct WiiUTexture
{
    contentType magic;
    uint16 unknown[2]; //Must be 4096 and 1
    NW4F_GX2_SurfaceDim surfaceDim;
    uint32 width;
    uint32 height;
    //Useless, either useful outside game or dummy
    uint32 unknown2;
    uint32 mips;
    NW4F_GX2_SurfaceFormat textureFormat;
    NW4F_GX2_AAMode AAMode;
    NW4F_GX2_SurfaceUse surfaceUse;
    //Useless end
    uint32 pixelSize; //If this mismatches, the tex would look weird
    //Useless
    uint32 dataPtr;
    uint32 mipMapDSize;
    uint32 mipMapPtr;
    NW4F_GX2_TileMode tileMode;
    uint32 swizzle;
    //Useless end
    uint32 alignment;
    //Useless
    uint32 pitch;
    byte unknown3[64];
    uint32 unknown4;
    byte componentSelector[4];
    //Useless end
    uint32 texRegisters[5]; //The last one does little
};

typedef struct GameCubeTexture_NotReally
{
    contentType magic;
    uint16 width;
    uint16 height;
    GCTTexFmt texFmt;
    GCTPalFmt palFmt;
    uint32 unk;
    uint32 pixelSize;
    uint32 palSize;
    uint32 unk2[2];
};

typedef struct MipHeader
{
    contentType magic;
        //FSkip(2);
        uint32 dataSize; //or offset, no effect when modifying
        uint16 xOff;
        uint16 yOff;
        //Useless metadata! Modify these and nothing breaks, except it's a little harder to determine the texture externally
        uint32 dataOff; //Or header size?
        if (dataOff == 192)
        {
            isWiiU = 1;
        }
        else
        {
            isWii = 1;
        }
        uint32 width;
        uint32 height;
        uint16 unk2[2];
        if (isWii)
        {
            uint32 unk;
        }
        //Useless metadata end
};

struct Fusion_Nintexture
{
    BigEndian();
    uint32 checkForHeaderless<hidden=true>;
    FSkip(-4);
    if (checkForHeaderless == 1465209888)
    {
        isWiiU = 1;
        WiiUTexture WUT_Headerless;
        byte theTexData[WUT_Headerless.pixelSize];
    }
    else if (checkForHeaderless == 1195594784)
    {
        isWii = 1;
        GameCubeTexture_NotReally GCT_Headerless;
        byte theTexData[GCT_Headerless.pixelSize];
    }
    else
    {
        MipHeader MIPh;
        if (isWii)
        {
            GameCubeTexture_NotReally GCT;
        }
        if (isWiiU)
        {
            WiiUTexture WUT;
            FSeek(MIPh.dataOff);
        }
        byte theTexData[MIPh.dataSize];
    }
} TextureFile;