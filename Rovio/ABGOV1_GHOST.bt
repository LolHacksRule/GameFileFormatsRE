//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: ABGOV1_GHOST.bt
//   Authors: LolHacksRule
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

LittleEndian();


typedef enum <byte>
{
    AirRace1 = 0x2A,
    AirRace2 = 0xC5,
    AirRace3 = 0xC0,
    RockyRoadRace1 = 0x6F,
    RockyRoadRace2 = 0x09,
    RockyRoadRace3 = 0x51,
    SeedwayRace1 = 0x5A,
    SeedwayRace2 = 0x23,
    SeedwayRace3 = 0xB3,
} ABGO_MapID;

typedef struct
{
    ABGO_MapID MapID;
    byte unk;
    byte unk2;
    byte unk3;
    byte zero[4];
    uint32 compGhostDataSize;
    uint32 uncompGhostDataSize;
    byte compGhostData[compGhostDataSize];
    Printf("Map ID: %i\nCompressed Size: %i\nUncompressed Size: %i", MapID, compGhostDataSize, uncompGhostDataSize);
} CompressedGhost;

typedef struct
{
    struct HDR
    {
        int32 zero;
        int32 unk; //?
        string CurrentKart<bgcolor=cLtBlue>;
        //if (unk == 206158430208)
        //{
            //int32 unknown[3];
        //}
        FSeek(40);
        string CharacterName<bgcolor=cBlue>;
    } hdr;
    FSeek(112);
    struct Ghost
    {
        Printf("Kart: %s\nCharacter: %s\n", hdr.CurrentKart, hdr.CharacterName);
        float unkFloats[5]<bgcolor=cRed>;
        int32 valueCnt<bgcolor=cPurple>;
        float unkFloat<bgcolor=cRed>; //Dev ghosts suggests it's a float?
        float floatValue[(valueCnt*8 -1)]<bgcolor=cPurple>;
        byte  pad[32]<bgcolor=cRed>; //Seems to be padding
    } ghost;
} UncompressedGhost;

struct ABGOV1_Ghost
{
    ubyte bc<hidden=true>;
    FSkip(-1);
    if (bc > 0)
    {
        Printf("The Ghost file is compressed! Let's make the compressed ghost struct.\n");
        CompressedGhost theCompressedGhostData;
    }
    else
    {
        Printf("The Ghost file is uncompressed! Let's make the uncompressed ghost struct.\n");
        UncompressedGhost theUncompressedGhostData;
    }
} ghost10;