//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "../../LHR/Common.bt"
local uint printRawXML <hidden=true> = 0;

typedef struct Zuma2Dot
{
    int32 x;
    int32 y;
};

typedef struct Zuma2Curve
{
    int32 idx;
    Byte_StringEntry curve;
};

typedef struct Zuma2Tunnel
{
    Byte_Bool unk;
    UByte_StringEntry ImageName;
    int32 unk2;
    int32 unk3;
    Byte_Bool unk4;
    int32 unk5;
    Byte_Bool unk6;
};

typedef struct Zuma2DDS
{
    int32 powerpcts;
    float powerpct[powerpcts];
    int32 slowadds;
    int32 slowadd[slowadds];
    int32 speedpcts;
    float speedpct[speedpcts];
    int32 zumapcts;
    float zumapct[zumapcts];
};

typedef struct Zuma2GauntletDifficulty
{
    int32 time;
    byte unk2;
    float speed;
    int32 startdist;
    int32 zumascore;
    int32 ballrepeat;
    int32 powerup;
    int32 colors;
    int32 rollback;
    float dangerratio;
    int32 maxclumps;
    int32 maxsingles;
    int32 rollbackduration;
    int32 HurryDist;
    float HurrySpeed;
};

typedef struct Zuma2Gauntlet
{
    int32 Difficulties;
    Zuma2GauntletDifficulty Z2_GauntletDifficulties[Difficulties];
};

typedef struct Zuma2HandheldBalanceEntry
{
    float FruitPowerupDuration;
    float SameColorChance;
    int32 Adventures;
    float Adventure[Adventures];
    int32 Challenges;
    float Challenge[Challenges];
};

typedef struct Zuma2HandheldBalance
{
    Zuma2HandheldBalanceEntry Z2_Tablet;
    //int32 unk;
    //int32 unk2;
    //int32 unk3;
    //byte unk;
    //Zuma2HandheldBalanceEntry Z2_Phone;
};

typedef struct Zuma2ScoreTip
{
    int32 MinLevel;
    int32 text; //From text/text_%s.txt
};

typedef struct Zuma2Gun
{
    int32 Type;
    int32 X;
    int32 Y;
};

typedef struct Zuma2TreasurePoint
{
    int32 x;
    int32 y;
    int32 dists;
    int32 dist[dists];
};

typedef struct Zuma2Zone
{
    UByte_StringEntry boss;
    UByte_StringEntry start;
    int32 num;
    int32 challengepoints;
    int32 acechallenge;
    int32 Difficulty;
    int32 Cup;
    int32 BossTaunts;
    int32 BossTaunt[BossTaunts]; //From text/text_%s.txt
    UByte_StringEntry fruit;
};

typedef struct Zuma2Default
{
    int32 CannonShots;
    float CannonAngle;
    int32 MaxZumaPctForColorNuke;
    int32 BeatGamePointsForLife;
    int32 PointsForExtraLife;
    Byte_Bool BossesCanAttackAffectedFrog;
    int32 BossAttackDelayAfterHitFrog;
    int32 PointsForBronze;
    int32 PointsForSilver;
    int32 PointsForGold;
    float PowerIncAtZumaPct;
    float PowerInc;
    int32 ClearCurvePoints;
    float ClearCurveRolloutPct;
    float ClearCurveSpeedMult;
    int32 GauntletSessionLength;
    int32 NumForMultBase;
    int32 NumForMultInc;
    int32 MultiplierDuration;
    int32 MultTimeAdd;
    int32 MaxNumForMult;
    int32 PointTimeAdd;
    int32 NumPointsForTimeAdd;
    int32 ChallengeTFreq;
    Byte_Bool cannonstack;
    float MinMultSpawnDist;
    int32 MultBallPoints;
    int32 MultBallLife;
    int32 BossTauntChance;
    int32 powerspawndelay;
    int32 LazerShots;
    Byte_Bool LazerStacks;
    int32 PowerDelay;
    int32 PowerCooldown;
    Byte_Bool ColorNukeAfterZuma;
    int32 ColorNukeTimeAfterZuma;
    Byte_Bool UniquePowerupColor;
    Byte_Bool PowerupCapAffectsTriggered;
    int32 PostZumaTime;
    float PostZumaTimeSpeedInc;
    float PostZumaTimeSlowInc;
};

typedef struct Zuma2Level
{
    UByte_StringEntry id;
    int32 unk;
    int32 unk2;
    int32 ChallengePoints;
    int32 AceChallenge;
    Byte_Bool OffscreenClearBonus;
    int32 gauntlet;
    int32 dispname;
    int32 unk4;
    float hurryamt;
    int32 unk6;
    Byte_Bool unk7;
    int32 unk8;
    int32 unk9;
    Byte_Bool unk10;
    Byte_Bool unk11;
    int32 unk12;
    Byte_Bool unk13;
    int32 TreasureFreq;
    int32 unk15;
    int32 ParTime;
    int16 unk16;
    int16 unk17;
    int16 unk18;
    float unk19;
    int32 unk20;
    Byte_Bool unk21;
    Byte_Bool unk22;
    int32 Effects;
    UByte_StringEntry Effect[Effects]<optimize=false>;
    int32 Curves;
    Zuma2Curve Curve[Curves]<optimize=false>;
    int32 unk25;
    int32 unk26;
    int32 unk27;
    int32 unk28;
    int32 unk29;
    int32 TreasurePoints;
    Zuma2TreasurePoint TreasurePoint[TreasurePoints]<optimize=false>; 
    int32 SetEffectParams;
    UByte_StringEntry Str;
    UByte_StringEntry Value;
    uint32 DistAmts;
    UByte_StringEntry DistAmt;
    UByte_StringEntry DistAmtStr;
    uint32 Scales;
    UByte_StringEntry Scale;
    UByte_StringEntry ScaleStr;
    uint32 Scrolls;
    UByte_StringEntry Scroll;
    UByte_StringEntry ScrollStr;
    uint32 Mumus;
    UByte_StringEntry Mumu;
    UByte_StringEntry MumuStr;
    int32 unk30;
    int32 unk31;
    Zuma2Tunnel ImageEntry[unk31]<optimize=false>;
    int32 unk32;
    Zuma2Gun Gun<optimize=false>;
    int32 unk33;
    int32 unk34;
    int32 unk35[9];
    Byte_Bool unk36;
    Byte_Bool unk37;
    if (unk > 10)
    {
        int32 unk38_bossval;
    }
};

typedef enum <uint16>
{
    None,
    Start,
    End,
    Element,
    Instruction,
    Comment,
} Zuma2XMLElementType;

struct Zuma2XNALevelXMLBin
{
    FSkip(61); //Comment out if raw
    BigEndian();
    Zuma2XMLElementType elementType;
    LittleEndian();
    int32 Dots;
    Zuma2Dot Dot[Dots];
    int32 unk;
    Zuma2DDS DDS;
    Zuma2HandheldBalance HandheldBalance;
    int32 Gauntlets;
    Zuma2Gauntlet Gauntlet[Gauntlets]<optimize=false>;
    int32 Tips; //?
    int32 ScoreTips;
    Zuma2ScoreTip ScoreTip[ScoreTips]<optimize=false>;
    int32 Zones;
    Zuma2Zone Zone[Zones]<optimize=false>;
    Zuma2Default Default<optimize=false>;
    int32 Levels;
    Zuma2Level Level[Levels]<optimize=false>;
} levels_xnb;