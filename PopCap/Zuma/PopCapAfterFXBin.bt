//------------------------------------------------
//--- 010 Editor v10.0.2 Binary Template
//
//      File: PopCapAfterFXBin.bt
//      Authors: LolHacksRule
//      Version: 1
//      Purpose: Gets data out of PAX files from a related library (PopCap AELib/Additive/AfterEffects X?)) known as AELib in the proprietary version of the PopCap (SexyApp/Sexy App) Framework.
//      Category: Deserializing 
//      File Mask:
//      ID Bytes:
//      History: 
//------------------------------------------------

//It's funny how this is in a library but specific to Zuma's Revenge

//WIP!

#include "../../LHR/Common.bt"

struct PopCapAfterFX {
    struct Header {
        int32   unk; //3, 4 or 5
        Printf("Textures:\n");
        int32   texCnt;
    } HDR;
    struct FootageDescriptors {
        for (i = 0; i < HDR.texCnt; i++)
        {
            struct FootageDescriptor {
                I32_StringEntry ShortName;
                long Id;
                I32_StringEntry FullName;
                Printf("%s\n", FullName.theString);
                long width;
                long height;
            } FD;
        }
    } flst<bgcolor = cBlue>;
    struct Compositions {
        int32 unk3;
        if (unk3 != 1)
        {
            break;
        }
        I32_StringEntry LayerName; //Idk may have a max of 32
        long width;
        long height;
        int32 compCnt;
        int32 maxDuration;
        for (i = 0; i < compCnt; i++)
        {
            struct Composition {
                int32 unk3;
                Byte_Bool flag;
                if (flag == Byte_True)
                {
                    Byte_Bool flag2;
                    long   unk4;
                    I32_StringEntry ShortName;
                    I32_StringEntry LongName;
                    int32  StartFrameOnComp;
                    int32  unk5;
                    int32  unk6;
                    int32  LayerOffsetStart;
                    if (HDR.unk >= 5)
                    {
                        Byte_Bool isAdditive;
                    }   
                    /*if (flag2 == True)
                    {
                        struct Layer {
                            int32 idk;
                        } NestedLayer;
                    }
                    else
                    struct NestedComposition {
                    } NestedCompositionInfo;
                    if (flag2 == True)
                    {
                        for (i = 0; i < HDR.texCnt; i++)
                        {
                            int
                        }
                    }*/
                    struct Layer
                    {
                        int32 unk;
                        //while (unk != 9)
                        //{
                            double dbl1;
                            double dbl2;
                            int32 unk2;
                            long unklong3;
                            Byte_Bool flag3;
                            int32 loopType;
                            int32 loopFrame;
                            //long l;
                            int32 u;
                            double dbl3[4];
                            int32 u3;
                        //}
                    } lyr;
                }
            } CompositionInfo;
        }
    } CompositionData;
} PAX;