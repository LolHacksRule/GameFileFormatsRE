//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: ZumaCurveFile.bt
//   Authors: LolHacksRule
//   Version: 1.0
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "../../LHR/Common.bt"

/*
General Format Info (Credits to the said):
https://github.com/GScience/ZumaToolPack/blob/master/Zuma%20Curv%E5%88%86%E6%9E%90.docx?raw=true
https://hclxing.wordpress.com/2017/06/27/reverse-engineering-zuma-deluxes-level-file/
Mostly decompiled WP7 ver
*/

//Reads BOTH Zuma Deluxe, Flash and Revenge's curve formats, which are the same for Blitz

//V1: ?
//V2: PC/MAC (Yes)
//V3: Flash (Yes)
//V4: ZR_v1 (Yes)
//V5: ?
//V6: ZR_v2 (Yes)
//V7: ZR_v3 (Yes)
//V8: ZR_v4 (Yes)
//V9: ?
//V10: ZR_v5 (Yes)
//V11: ZR_v6 (Yes)
//V12: ZR_v7 (Yes)
//V13: ZR_v8 (Yes)
//V14: ZR_v9 (Yes)
//V14: ZR_v10 (Yes)
//V15: ZR_v11 (Yes)

//TODO: Find the functions of the unk values or manually reverse to see they do, maybe check priority

typedef enum <byte>
{
    Top,
    Bottom,
} ZumaCurve_Layer;

typedef struct
{
    if (version > 3)
    {
        byte unk; //Some float flag, 2 means to use floats, haven't messed with this myself
        if (hasTunnels || version >= 15)
        {
            ZumaCurve_Layer priority;
        }
    }
    if ((version >= 4 && unk >= 2) || (version <= 3 && i == 0)) //Check for Zuma2 curves and enforce the first value is float in Zuma1
    {
        float x;
        float y;
    }
    else
    {
        byte x;
        byte y;
    }
    if (version < 3)
    {
        Byte_Bool isInTunnel;
        ZumaCurve_Layer lyr;
    }
} Zuma_PathPoint;

typedef struct
{
    //float x;
    //float y;
    byte X;
    byte Y;
    Byte_Bool isInTunnel;
    ZumaCurve_Layer lyr;
} Zuma1_PathPoint;

typedef struct
{
    int32 x;
    int32 y;
    Byte_Bool isInTunnel;
    ZumaCurve_Layer lyr;
} Zuma1_KeyPoint;

/*typedef enum PowerType
{
    PowerType_ProximityBomb,
	PowerType_SlowDown,
	PowerType_Accuracy,
	PowerType_MoveBackwards,
	PowerType_Lob,
	PowerType_BombBullet,
	PowerType_BallEater,
	PowerType_Cannon,
	PowerType_ColorNuke,
	PowerType_Laser,
	PowerType_Fireball,
	PowerType_ShieldFrog,
	PowerType_FreezeBoss,
	PowerType_GauntletMultBall,
	PowerType_Max,
	PowerType_None = 14
} pwrType;*/

//local int i <hidden=true> = 0;
//local int i2 <hidden=true> = 0;

struct ZumaCurveFile
{
    LittleEndian();
    char CURV[4]<bgcolor=cGreen>;
    uint32 version<bgcolor=cPurple>;
    if (version > 3)
    {
        Printf("Zuma's Revenge! Curve\n");
        Printf("---------------------\n");
        Printf("Version: %i\n", version);
        struct Zuma2Curve
        {
            if (version >= 8)
            {
                Byte_Bool isLinear;
                if (isLinear == Byte_True)
                {
                    Printf("isLinear: True\n");
                }
                else
                {
                    Printf("isLinear: False\n");
                }
            }
            if (version >= 7) //Ver 7+ added level settings
            {
                Printf("------LEVEL PARAM START-----\n");
                uint32 startDistance;
                Printf("startDistance: %i\n", startDistance);
                uint32 numBalls;
                Printf("numBalls: %i\n", numBalls);
                uint32 ballRepeat;
                Printf("ballRepeat: %i\n", ballRepeat);
		        uint32 maxSingle;
                Printf("maxSingle: %i\n", maxSingle);
                uint32 numColors;
                Printf("numColors: %i\n", numColors);
                if (version <= 10)
                {
                    int32  unkI32;
                    float  unkF32;
                }
                float speed;
                Printf("speed: %f\n", speed);
                uint32 slowDist;
                Printf("slowDist: %i\n", slowDist);
                float accelRate;
                Printf("accelRate: %f\n", accelRate);
                float maxSpeed;
                Printf("maxSpeed: %f\n", maxSpeed);
                int32 scoreTarget;
                Printf("scoreTarget: %i\n", scoreTarget);
                uint32 skullRotation;
                Printf("skullRotation: %i\n", skullRotation);
                uint32 zumaBack;
                Printf("zumaBack: %i\n", zumaBack);
                uint32 zumaSlow;
                Printf("zumaSlow: %i\n", zumaSlow);
                if (version >= 13)
                {
                    float slowFactor;
                }
                else
                {
                    local float slowFactor = 4.0;
                }
                Printf("slowFactor: %f\n", slowFactor);
                if (version >= 14)
                {
                    uint32 maxClumpSize;
                }
                else
                {
                    local uint32 maxClumpSize = 10;
                }
                Printf("maxClumpSize: %i\n", maxClumpSize);
                struct PowerupTable
                {
                    uint32 pwrUpNum;
                    Printf("pwrUpNum: %i\n", pwrUpNum);
                    Printf("-------POWERUP PARAM START-------\n");
                    for (i = 0; i < pwrUpNum; i++)
                    {
                        Printf("--------POWERUP %i START--------\n", i);
                        struct Powerup
                        {
                            /*if (i == 10)
                            {
                                int32 unkDepPwrVal1;
                                if (version >= 12)
                                {
                                    int32 unkDepPwrVal2;
                                }
                            }
                            else*/
                            {
                                int32 powUpFreq;
                                Printf("powUpFreq: %i\n", powUpFreq);
                                if (version >= 12)
                                {
                                    int32 maxNum;
                                    Printf("maxNum: %i\n", maxNum);
                                }
                            }
                        Printf("-----POWERUP %i END-------\n", i);
                        } pwrUp;
                    }
                    Printf("-----POWERUP PARAM END-----\n");
                } pwrUpTbl;
                if (version >= 12)
                {
                    int32 pwrUpChance;
                    Printf("pwrUpChance: %i\n", pwrUpChance);
                }
                Byte_Bool drawCurve;
                if (drawCurve == Byte_True)
                {
                    Printf("drawCurve: True\n");
                }
                else
                {
                    Printf("drawCurve: False\n");
                }
                Byte_Bool drawTunnels;
                if (drawTunnels == Byte_True)
                {
                    Printf("drawTunnels: True\n");
                }
                else
                {
                    Printf("drawTunnels: False\n");
                }
                Byte_Bool destroyAll;
                if (destroyAll == Byte_True)
                {
                    Printf("destroyAll: True\n");
                }
                else
                {
                    Printf("destroyAll: False\n");
                }
                if (version > 8)
                {
                    Byte_Bool drawPit;
                    if (drawPit == Byte_True)
                    {
                        Printf("drawPit: True\n");
                    }
                    else
                    {
                        Printf("drawPit: False\n");
                    }
                }
                if (version > 9)
                {
                    Byte_Bool dieAtEnd;
                    if (dieAtEnd == Byte_True)
                    {
                        Printf("dieAtEnd: True\n");
                    }
                    else
                    {
                        Printf("dieAtEnd: False\n");
                    }
                }
            }
            Printf("------LEVEL PARAM END------\n");
            Byte_Bool hasNoEditType; //Seems no samples I tried set this to true
            if (hasNoEditType == Byte_True)
            {
                Printf("hasNoEditType: True\n");
            }
            else
            {
                Printf("hasNoEditType: False\n");
            }
            Byte_Bool hasTunnels;
            if (hasNoEditType == Byte_True)
            {
                Printf("hasTunnels: True\n");
            }
            else
            {
                Printf("hasTunnels: False\n");
            }
            if (!hasNoEditType)
            {
                uint32 editType;
                Printf("editType: %i\n", editType);
                uint32 unkNum;
                Printf("unkNum: %i\n", unkNum);
                byte bytesOfEdit[unkNum];
            }
            uint32 pathPointCnt;
            Printf("pathPointCnt: %i\n", pathPointCnt);
            struct Z2PathPoints
            {
                for (i = 0; i < pathPointCnt; i++)
                {
                    Zuma_PathPoint thePathPointV2<bgcolor=cGreen>;
                }
            } Z2_PathPoints;
        } Z2_CURV<bgcolor=cBlue>;
    }
    else
    {
        struct Zuma1Curv
        {
            Byte_Bool unkBool[2];
            if (version != 3)
            {
                FSkip(2); //It's probably two zeroes
            }
            if (version == 2)
            {
                int32 keyBlockSize;
                int32 keyPointCnt;
                struct KeyPoints
                {
                    for (i = 0; i < keyPointCnt; i++)
                    {
                        Zuma1_KeyPoint theKeyPoint;
                    }
                } kpZ1;
            }
            int32 pathPointCnt;
            struct PathPoints
            {
                for (i = 0; i < pathPointCnt; i++)
                {
                    Zuma_PathPoint thePathPoint;
                }
            } Z1_PathPoints;
        } Z1_CURV;
    }
} ZumaCURV;
