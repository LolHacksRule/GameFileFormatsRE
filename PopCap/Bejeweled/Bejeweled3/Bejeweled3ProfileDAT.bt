//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: Bejeweled3ProfileDAT.bt
//   Authors: LolHacksRule
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "../../../LHR/Common.bt"

local uint isBej3 <hidden=true> = 0;

typedef enum <uint32>
{
    Locked,
    Lvl1,
    Lvl2,
    Lvl3,
    Lvl4,
    Lvl5_Elite,
} Bej3_BadgeLevel;

typedef struct
{
    if (saveVer == 71)
    {
        uint32 playerRank;
    }
    else
    {
        uint32 offlineRank; //Generated from XP, edits do not change this value.
    }
    if (saveVer == 71)
    {
        uint32 totalTimePlayed;
    }
    else
    {
        uint32 totalScore;
    }
    uint32 unk1; //Highscore table for BejBlitz
    if (saveVer == 71)
    {
        uint32 ZenModeHighScore;
        uint32 unk2;
        uint32 GemsMatched;
        uint32 RedGems;
        uint32 WhiteGems;
        uint32 GreenGems;
        uint32 YellowGems;
        uint32 PurpleGems;
        uint32 OrangeGems;
        uint32 BlueGems;
        uint32 FlameGems;
        uint32 StarGems;
        uint32 HyperCubes;
        uint32 MoreStats[5]; //Highscore table
    }
    else
    {
        uint32 MoreStats[17]; //Highscore table
    }
    if (saveVer == 62)
    {
        int32 BejBlitz_Coins;
        uint32 bestScore;
    }
    else
    {
        uint32 unk3[5];
        uint32 allTimeBestMovePts;
        uint32 unk4[17];
    }
} Bej3GameStats;

typedef struct
{
    ubyte ExtraTime;
    ubyte BonusMultiplier;
    ubyte MysteryGem;
    ubyte Detonator; //Check
    ubyte Scrambler; //Check
} BejBlitzOfflinePowerUps;

struct Bejeweled3ProfileDAT
{
    LittleEndian();
    uint32 magic;
    uint32 saveVer;
    if (saveVer >= 60)
    {
        
        Bej3GameStats gameStats;
        if (saveVer == 71)
        {
            //FSeek(0xB8);
            Bej3_BadgeLevel badgeLevels[20]; //Beyond 5 is crash
        }
        else
        {
            uint32 itra[5];
            Bej3_BadgeLevel badgeLevels[12]; //Beyond 5 is crash
        }
        if (saveVer == 71)
        {
            //FSeek(0x118-7);
        }
        Byte_Bool customCursors;
        if (saveVer == 71)
        {
            Byte_Bool ButterfliesUnlocked;
            Byte_Bool IceStormUnlocked;
            Byte_Bool DiamondMineUnlocked;
            Byte_Bool unk4;
            Byte_Bool unk5; //Load related
        }
        uint32 tutorialFlags; //1: Skip on boot
        uint16 tipIdx;
        if (saveVer == 71)
        {
            uint32 unk7;
        }
        Byte_Bool questsCompleted[8*5];
        if (saveVer == 62)
        {
            U16_StringEntry fbName;
            U16_StringEntry fbPass;
            FSkip(20);
            Byte_Bool fbAutoLogin;
            uint32 unkv;
            if (unkv > 0)
            {
                U16_StringEntry fname;
                U16_StringEntry right;
            }
            //uint32 localDataMap;
            FSeek(0xF4); //?
            BejBlitzOfflinePowerUps BejBlitz_OfflinePowerUps; //You can have these on all at once and the game doesn't care
            uint32 onlineRank;
            uint32 onlineRankPoints;
            uint32 offlineRankPoints;
            uint32 offlineGames;
            uint32 onlineGames;
            uint32 dmy[2]; //?
        }
        if (saveVer == 71)
        {
            uint32 unk8[5];
            uint16 unk9;
            float unk10;
            uint16 unk11;
            uint32 unk12[4];
            uint16 unk13;
            struct ZenParam
            {
                struct BreathModulation
                {
                    Byte_Bool EnableBreathModulation;
                    //if (EnableBreathModulation == Byte_True)
                    {
                        Byte_Bool EnableBreathModulationVisualIndicator;
                        float BreathModulationSpeed;
                    }
                } breathmodulation;
                struct AmbientSounds
                {
                    Byte_Bool EnableAmbientSounds;
                    //if (EnableAmbientSounds == Byte_True)
                    {
                        I16_StringEntry AmbientSoundsSound;
                        //float AmbientSoundsVolume;
                    }
                } ambientsounds;
                struct BinarualBeats
                {
                    Byte_Bool EnableBinarualBeats;
                    I16_StringEntry BinarualBeatsPattern;
                    //float BinarualBeatsVolume;
                } binarualbeats;
                struct Mantras
                {
                    Byte_Bool EnableMantras;
                    //if (EnableMantras == Byte_True)
                    {
                        I16_StringEntry Mantra;
                        Byte_Bool EnableSublimal;
                        //if (EnableSublimal == Byte_True)
                        {
                            float MantrasSublimalVisibility;
                        }
                        //else
                        {
                            float MantrasSpeed;
                        }
                    }
                } mantras;
            } zprm;
            int16 countOfUnk;
            byte finalUnk[countOfUnk];
        }
    }
} PROFILE_DAT;