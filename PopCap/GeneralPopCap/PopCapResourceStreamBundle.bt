//------------------------------------------------
//--- 010 Editor v10.0.2 Binary Template
//
//      File: PopCapResourceStreamBundle.bt
//      Authors: LolHacksRule
//      Version: 17
//      Purpose: Gets data out of the bundle and groups.
//      Category: Game Archive
//      File Mask: rsb1
//      ID Bytes:
//      History: 
//------------------------------------------------

/*
General Format Info:
https://github.com/TwinKleS-C/PvZTool/blob/main/src/pvztool.c
https://github.com/Nineteendo/PVZ2tools/blob/master/OBBEdit/README.md
http://www.watto.org/specs.html?specs=Archive_RSB_1BSR
https://github.com/YingFengTingYu/PopStudio
Bejeweled 3 (Japanese) PDBs
Unstripped Plants vs Zombies on Android
*/

//Tested on various.
#include "../../LHR/Common.bt"

local int ver4Rsb <hidden=true> = 0;
//local int i <hidden=true> = 0;
//local int i2 <hidden=true> = 0;
local int isCompressedPTXFile <hidden=true> = 0;
//PVZ2 has a header
local int isPVZ2CompressedPTXFile <hidden=true> = 0;

typedef enum <uint32> {
    German = 1145390149, //DEDE
	English = 1162761555, //ENUS
    Spanish = 1163085139, //ESES
    French = 1179797074, //FRFR
    Italian = 1230260564, //ITIT
    Portuguese = 1347699282, //PTBR
    Japanese = 1245792848 //JAJP
} PopCap_ResStream_Lang;

typedef struct ResourceStreamHeader
{
    char  hdr[4];
    if (hdr == "rsb1")
    {
        BigEndian();
        Printf("PS3/X360 Resource Stream Bundle\n");
    }
    if (hdr == "1bsr")
    {
        LittleEndian();
        Printf("Android/iOS/PS4 Resource Stream Bundle\n");
    }
    uint32 verMajor; //Should be same as hdr, 4 = PVZ2, BookWorm Heroes, 3 = Console Ports/Bejeweled Classic/Peggle 2, PVZ (v1.9.5+), 2 = ? (Please contact me if you found a V2 RSB) 1.1 = Bejeweled Classic (v1.0.0), A.S.P for iOS
    uint32 verMinor; 
};

typedef enum <uint32>
{
    AlphaFmt_ETC1_RGB_A = 100
} PopCap_PopTexture_AlphaFormat;

typedef enum <uint32> {
	ARGB8888,
    RGBA4444,
    RGB565,
    RGBA5551,
    DXT5 = 5, //PS4/Xbox 360
    ETC1_RGB_A8 = 147,
    RGBA4444_BLOCK = 21 //?
} PopCap_PopTexture_ImageFormat;

typedef struct SubGroupInfo //Accurate?
{
    char thePoolName[128];
    struct InfoEntry
    {
        uint32 idx<bgcolor = cPurple>;
        uint32 ratio<bgcolor = cDkBlue>;
        if (Header.RSBHeader.verMajor > 1)
        {
            PopCap_ResStream_Lang lang<bgcolor = cDkGreen>;
            uint32 unk <bgcolor = cRed>;
        }
    } info_entry[64]<optimize=false>;
    uint32 subgroups;
};

typedef struct ResGroupInfo
{
    //byte subGroupInfoData[Header.resGroupFileNameTableItemSize];
    char thePoolName[128];
    //string thePoolName;
    //FSkip(128 - sizeof thePoolName); 
    uint32 resGroupOffset;
    uint32 resGroupSize;
    uint32 resGroupIdx;
    uint32 flags; //unknown?
    uint32 fileOffsetInResGroup;
    uint32 pt0Off;
    uint32 pt0ZSize;
    uint32 pt0Size;
    uint32 pt0Size2;
    uint32 pt1Off;
    uint32 pt1ZSize;
    uint32 pt1Size;
    FSkip(20);
    if (Header.RSBHeader.verMajor > 1)
    {
        uint32 texCnt;
        uint32 idx;
    }
};

typedef struct AutoPool
{
    //byte autoPoolData[Header.AutoPoolTableItemSize];
    char thePoolName[128];
    //string thePoolName;
    //FSkip(128 - sizeof thePoolName); 
    uint32 resGroupFileOffset;
    uint32 resGroupFileSize;
    uint32 autoPoolNum;
    uint32 commonSize; //3?
    uint32 cFileLocation;
    uint32 cFileMemSize;
    //uint32 dFileLocation;
    //uint32 dFileFileSize;
    //uint32 dFileMemSize;
};

typedef struct PTXInfo
{
    uint32 width;
    uint32 height;
    uint32 pitch;
    PopCap_PopTexture_ImageFormat textureFormat;
    if (Header.ptxInfoTableItemSize == 20) //Helps with DEV1/2 RSBs from PVZ2C
    {
        uint32 alphaSize; //Is it alphaSize?
        if (Header.ptxInfoTableItemSize == 24)
        {
            PopCap_PopTexture_AlphaFormat alphaFormat;
        }
    }
};

typedef struct ResListXMLPtxInfo
{
    struct Part1
    {
        uint32 unkxml1;
        uint32 languageCount;
        uint32 unkxml2;
        uint32 unkxml3;
        /*if (unkxml3 == 0)
        {
                struct XMLLang
                {
                    byte langStr[4];
                    uint32 pt3IDOff;
                    uint32 resN;
                    uint32 unk[3];
                } xl[languageCount - 1;
        }
        else
        {
            
        }*/
    } rl_xptxhdrpart1;
    /*FSeek(Header.xmlPart2Off);
    struct Part2
    {
        uint16 xmlPTXtype;
        uint16 xmlPTXflags;
        uint16 x;
        uint16 y;
        uint16 xmlPTXAtlasX;
        uint16 xmlPTXAtlasY;
        uint16 xmlPTXAtlasW;
        uint16 xmlPTXAtlasH;
        uint16 xmlPTXRows;
        uint16 xmlPTXCols;
        uint32 offtoPt3;
    } rl_xptxhdrpart2;*/
    FSeek(Header.xmlPart3Off+1); //For now
    struct Part3
    {
        string theFile;
    } pt3;
};

typedef struct ResourceStreamGroup //WIP! Seems to read all RSGs I have, getting PVZ2's from CDN to work was a doozy
{
    isCompressedPTXFile = 0;
    isPVZ2CompressedPTXFile = 0;
    ResourceStreamHeader RSGHeader;
    uint32 tSize; //Dummy?
    uint32 dataCmnSize;
    uint32 dataResidentOff;
    uint32 dataResidentFileSize;
    uint32 dataResidentMemSize;
    uint32 dataGPULocation;
    uint32 dataGPUFileSize;
    uint32 dataGPUMemFileSize; //zlib size?
    uint32 dataTransientLocation;
    uint32 dataTransientFileSize;
    uint32 dataTransientMemFileSize;
    /*if (decDataLen[0] <= 0 || decDataLen[1] <= 0)
    {
        Printf("\nResource Group is compressed\n");
        uint32 fileOff;
        uint32 compressedFileDataSize;
        uint32 decFileDataSize;
    }
    else
    {
        Printf("\nRawFile\n");
        uint32 fSize;
        uint32 null3[2];
    }*/
    FSkip(16);
    uint32 fileIdxLen;
    uint32 fileIdxOffset;
    uint32 texDescCnt;
    uint32 texDescOffset;
    uint32 texDescSize;
    //FSkip(12);
    byte  fileIndex[fileIdxLen];
    if (dataResidentMemSize == 0 || dataGPULocation == 0)
    {
        FSkip(-32);
    }
    else
    {
        FSkip(-16);
    }
    //FSkip(-256);
    //FSkip(fileOff);
    I32_Bool isPTX;
    if (dataCmnSize == 1)
    {
        isCompressedPTXFile = 1;
    }
    if (dataCmnSize == 3)
    {
        isCompressedPTXFile = 1;
        isPVZ2CompressedPTXFile = 1;
    }
    if (fileIdxLen != 0)
    {
        if (isPTX == I32_True)
        {
            struct PopTextureFile
            {
                uint32 unk;
                uint32 FSize; //Minus size of PTX HDR?
                FSkip(12);
                //uint32 unknown[5];
                uint32 texWidth;
                uint32 texHeight;
                //byte t;
                FSkip(-sizeof fileIndex);
                FSkip(-92); //go back to RSGP to jump
                FSkip(dataResidentOff);
                if (isCompressedPTXFile) //PopCap tends to commonly compress textures so I'm assuming textures are these
                {
                    if (isPVZ2CompressedPTXFile)
                    {
                        byte zlibPVZ2CompressedPTXFiles[dataTransientLocation+dataResidentMemSize];
                    }
                    else
                    {
                        byte zlibCompressedPTXFiles[dataTransientLocation];
                    }
                }
                else
                {
                    byte PTXFiles[dataTransientFileSize];
                }
            } PopTexture;
        }
        else
        {
            struct ResourceFile //WIP! DOUBLE CHECK
            {
                FSkip(4);
                uint32 sizeOfContent1;
                uint32 sizeOfContent2;
                FSkip(-sizeof fileIndex);
                FSkip(-92); //go back to RSGP to jump
                FSkip(dataResidentOff);
                if (dataCmnSize != 3)
                {
                    if (sizeOfContent1 != 0)
                    {
                        byte ResourceFileContent1[sizeOfContent1];
                    }
                    byte ResourceFileContent2[sizeOfContent2];
                    if (sizeOfContent1 != 0)
                    {
                        FSkip(-sizeof ResourceFileContent1);
                    }
                    FSkip(-sizeof ResourceFileContent2);
                    FSkip(dataGPULocation);
                    if (dataTransientLocation != 0)
                    {
                        byte zlibCompressedFiles[dataTransientLocation];
                    }
                }
                else
                {
                    byte PVZ2ZlibCompressedContent[dataResidentMemSize];
                }
            } ResFile;
        }
        //else
        //{
            //byte rawFile[fSize];
        //}
        //WIP
        //struct ResourceFile
        /*
        FSkip(-24);
        uint32 compressed;
        if (compressed)
        {
            uint32 offst;
            uint32 decompLen;
            ImageFormat ImgFmt;
            uint32 dumagain[2];
            uint32 texWidth;
            uint32 texHeight;
        }
        FSeek(Header.firstResGroupDataOffst);
        byte pad[dOff];
        if (compressed)
        {
            byte zlibCompressed[cFSize];
        }
        else*/
        //{
            //byte rawFile[fSize];
        //}
    }
    else
    {
        Printf("\nResource Stream Group is empty! Skipping...\n");
        FSkip(dataGPUMemFileSize-64);
    }
};

struct ResourceStreamBundle
{
    struct ResStreamBundleHeader
    {
        ResourceStreamHeader RSBHeader;
        if (RSBHeader.verMajor == 4)
        {
            local int ver4Rsb<hidden=true>  = 1;
        }
        Printf("Version %i.%i\n", RSBHeader.verMajor, RSBHeader.verMinor);
        uint32 cmnDataSize<bgcolor = cPurple>; //Dummy?
        uint32 fileIdxSize<bgcolor = cWhite>;
        uint32 fileIdxOffset<bgcolor = cWhite>; //70 or 108 for V3
        FSkip(8);
        uint32 resGroupNameToIDSize<bgcolor = cYellow>;
        uint32 resGroupNameToIDOffset<bgcolor = cYellow>;
        uint32 resGroupFileCnt<bgcolor = cAqua>;
        uint32 resGroupFileNameTableUTF8Offset<bgcolor = cGreen>;
        uint32 resGroupFileNameTableItemSize<bgcolor = cGreen>;
        uint32 resGroupInfoTableEntryCnt<bgcolor = cPurple>;
        uint32 resGroupInfoTableOffset<bgcolor = cPurple>;
        uint32 resGroupInfoTableItemSize<bgcolor = cPurple>;
        uint32 resGroupListSize<bgcolor = cBlack>;
        uint32 resGroupListOffset<bgcolor = cBlack>;
        uint32 AutoPoolTableResGroupEntryCnt<bgcolor = cRed>; //Should be identical to resGroupFileCnt
        uint32 AutoPoolTableOffset<bgcolor = cRed>;
        uint32 AutoPoolTableItemSize<bgcolor = cRed>;
        uint32 ptxInfoTableEntryCnt<bgcolor = cLtRed>;
        uint32 ptxInfoTableOffset<bgcolor = cLtRed>;
        uint32 ptxInfoTableItemSize<bgcolor = cLtRed>;
        uint32 xmlPart1Off;
        uint32 xmlPart2Off;
        uint32 xmlPart3Off;
        if (ver4Rsb)
        {
            uint32 resourceStreamBundleLen; //?
        }
    } Header;
    //struct StringTable
    //{
        //wchar_t str[9];
    //} rsbStrings;
    //uint32 
    byte StringTable[Header.fileIdxSize]<bgcolor = cLtBlue>;
    byte SubGroupList[Header.resGroupNameToIDSize]<bgcolor = cYellow>;
    SubGroupInfo SubGroupInfoBlock[Header.resGroupInfoTableEntryCnt]<optimize=false, bgcolor = cGreen>;
    byte ResGroupList[Header.resGroupListSize]<bgcolor = cBlack>;
    ResGroupInfo ResGroupInfoBlock[Header.resGroupFileCnt]<optimize=false, bgcolor = cPurple>;
    AutoPool AutoPoolBlock[Header.AutoPoolTableResGroupEntryCnt]<bgcolor = cRed>;
    PTXInfo PTXInfoBlock[Header.ptxInfoTableEntryCnt]<optimize=false, bgcolor = cLtRed>;
    if (Header.xmlPart1Off != 0)
    {
        FSeek(Header.xmlPart1Off);
        ResListXMLPtxInfo ResListXML; //Unsupported atm
    }
    FSeek(Header.cmnDataSize); //Go to RSG files
    //Hack to detect stupid assetless RSB from newer BejBlitz (why)
    FPos = FTell();
    if (FPos < EOF)
    {
        ResourceStreamGroup ResourceStreamGroupFile[Header.resGroupFileCnt]<optimize=false, bgcolor = cPurple>;
    }
    else
    {
        Printf("Bejeweled Blitz RSB detected! Nothing to do...");
    }
} popCapResourceStreamBundle;