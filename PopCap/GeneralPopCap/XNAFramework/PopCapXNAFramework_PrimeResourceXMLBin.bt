//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "../../../LHR/Common.bt"
local uint printRawXML <hidden=true> = 0;

typedef enum <uint32>
{
    Image,
    Sound,
    Font,
    PopAnim,
    PIEffect,
    RenderEffect,
    GenericResFile,
} ResourceType;

typedef struct XMLAttribute
{
    UByte_StringEntry Path;
    UByte_StringEntry ResType;
};

typedef struct BaseRes
{
    UByte_StringEntry ID;
    UByte_StringEntry ResGroup;
    UByte_StringEntry CompositeResGroup;
    int32 artRes;
    uint32 locSet;
    UByte_StringEntry Path;
    Byte_Bool FromProgram;
    uint32 XMLAttributes;
    if (XMLAttributes)
    {
        XMLAttribute xmlAttrib[XMLAttributes]<optimize=false>;
    }
};

typedef struct ImageRes
{
    Byte_Bool Palletize;
    Byte_Bool A4R4G4B4;
    Byte_Bool DDSurface;
    Byte_Bool PurgeBits;
    Byte_Bool A8R8G8B8;
    Byte_Bool Dither16;
    Byte_Bool MinimizeSubDivisions;
    Byte_Bool AutoFindAlpha;
    Byte_Bool CubeMap;
    Byte_Bool VolumeMap;
    Byte_Bool NoTriMap;
    Byte_Bool _2DBig;
    Byte_Bool IsAtlas;
    UByte_StringEntry AlphaImage;
    uint32 AlphaColor;
    uint32 X;
    uint32 Y;
    UByte_StringEntry Variant;
    UByte_StringEntry AlphaGridImage;
    uint32 Rows;
    uint32 Cols;
    UByte_StringEntry AtlasName;
    uint32 AtlasX;
    uint32 AtlasY;
    uint32 AtlasW;
    uint32 AtlasH;
    uint32 AnimType;
    uint32 FrameDelay;
    uint32 BeginDelay;
    uint32 EndDelay;
    uint32 unk;
    if (AnimType == 0)
    {
        uint32 unk2;
    }
};

typedef struct SoundRes
{
    UByte_StringEntry SOUND;
    double Volume;
    int32 Panning;
};

typedef struct FontRes
{
    UByte_StringEntry ImagePath;
    UByte_StringEntry Tags;
    int32 Size;
    Byte_Bool Bold;
    Byte_Bool Italic;
    Byte_Bool Shadow;
    Byte_Bool Underline;
    Byte_Bool SysFont;
};

typedef struct RenderEffectRes
{
    UByte_StringEntry SrcFilePath;
};

typedef struct Resource
{
    UByte_StringEntry ResEntry;
    ResourceType resType;
    BaseRes theRes;
    if (resType == Image)
    {
        ImageRes TheImage;
    }
    else if (resType == Sound)
    {
        SoundRes TheSound;
    }
    else if (resType == Font)
    {
        FontRes TheFont;
    }
    else if (resType == RenderEffect)
    {
        RenderEffectRes TheRenderEffect;
    }
};

typedef struct SubGroup
{
    UByte_StringEntry SubGroupName;
    int32 ArtRes;
    uint32 LocSet;
};

typedef struct ResGroup
{
    UByte_StringEntry RESGROUP;
    UByte_StringEntry ResGroupName;
    int32 resEntries;
    if (resEntries)
    {
        Resource Resources[resEntries]<optimize=false>;
    }
};

typedef struct CompositeResGroup
{
    UByte_StringEntry COMPOSITE;
    UByte_StringEntry CompositeGroupName;
    int32 subGroupEntries;
    if (subGroupEntries)
    {
        SubGroup SubGroups[subGroupEntries]<optimize=false>;
    }
};

struct PopCapXNAFramework_PrimeResourceXMLBin
{
    struct XNAResXMLBin
    {
        FSkip(128); //Comment out if raw
        int32 compositeResGroupEntries<bgcolor=cGreen>;
        if (compositeResGroupEntries)
        {
            struct CompositeResGroups
            {
                for (i = 0; i < compositeResGroupEntries; i++)
                {
                    CompositeResGroup compositeResGroup;
                }
            } crgs<bgcolor=cGreen>;
        }
        int32 resGroupEntries<bgcolor=cGreen>;
        if (resGroupEntries)
        {
            struct ResGroups
            {
                for (i = 0; i < resGroupEntries; i++)
                {
                    ResGroup resGroup<bgcolor=cPurple>;
                }
            } rgs;
        }
    } resources_xml;
} resources_xml_xnb;