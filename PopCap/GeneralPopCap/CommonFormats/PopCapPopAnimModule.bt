//------------------------------------------------
//--- 010 Editor v10.0.2 Binary Template
//
//      File: PopCapPopAnimModule.bt
//      Authors: LolHacksRule
//      Version: 1
//      Purpose: Gets data out of the binary PAM (Pop/PopCap Animation Module) files.
//      Category: Deserializing 
//      File Mask:
//      ID Bytes:
//      History: 
//------------------------------------------------

//PAM VERSIONS:
/*
0: Haven't seen?
1: BookWorm Adventures Vol 1 / Vol 2 / FF / MK / ActiveX
2: BookWorm Adventures Vol 1 / Vol 2 / FF / MK / ActiveX
3: BookWorm Adventures Vol 2 / AP / FF / MK / ActiveX, Bejeweled Twist
4: Bejeweled Blitz (v1.1.0-v1.3.2), Bejeweled Classic, Zuma's Revenge! (PC/Console/iOS), Bejeweled 3 (PC/Console), Bejeweled Live (PC)
5: Bejeweled Blitz (v1.3.1-v1.3.2), Bejeweled Classic, BookWorm Heroes, Zuma's Revenge! (PC/Console/iOS), Bejeweled 3 (PC/Console), Bejeweled Live (PC), Peggle 2
6: Plants Vs. Zombies 2
*/

#include "../../../LHR/Common.bt"

typedef enum <ushort> {
	PAFrameFlag_HasRemoves = 1,
	PAFrameFlag_HasAdds,
    PAFrameFlag_HasMoves = 4,
    PAFrameFlag_HasFrameName = 8,
    PAFrameFlag_HasStop = 16,
    PAFrameFlag_HasCommands = 32,
} PopAnimFrameFlag;

typedef enum <ushort> {
	PAMoveFlag_HasSrcRect = 0x8000,
    PAMoveFlag_HasRotate = 0x4000,
    PAMoveFlag_HasColor = 0x2000,
    PAMoveFlag_HasMtx = 0x1000,
    PAMoveFlag_HasLongCoords = 0x800,
    PAMoveFlag_HasAnimFrameNum = 0x400,
} PopAnimMoveFlag;

typedef struct SpriteDefinition
{
    //WIP Solution for v6, uncomment and comment below
    if (HDR.version >= 4)
    {
        U16_StringEntry imageName;
        if (HDR.version > 5)
        {
            uint16 unk; //string end, has to be
            //Printf("%i\n", unk);
        }
        ulong animRate;
        local float animRateDiv = animRate / 0x10000;
    }
    ushort numOfFrames;
    if (HDR.version >= 5)
    {
        ushort workAreaStart;
        ushort workAreaDuration;
    }
    //Solution for all other vers
    /*if (HDR.version >= 4)
    {
        U16_StringEntry imageName;
        uint32 animRate;
        local float animRateDiv = animRate / 0x10000;
    }
    ushort numOfFrames;
    if (HDR.version >= 5)
    {
        ushort workAreaStart;
        ushort workAreaDuration;
    }*/
    //End
    struct AnimFrames
    {
        for (i2 = 0; i2 < numOfFrames; i2++)
        {
            struct AnimFrame
            {
                ubyte flags;
                if (flags & PAFrameFlag_HasRemoves)
                {
                    ubyte removes;
                    if (removes == 0xFF)
                    {
                        ushort removes;
                    }
                    for (i3 = 0; i3 < removes; i3++)
                    {
                        ushort objectId;
                        if (objectId >= 0x7FF)
                        {
                            ulong objectId;
                        }
                    }
                }
                if (flags & PAFrameFlag_HasAdds)
                {
                    ubyte adds;
                    if (adds == 0xFF)
                    {
                        ushort adds;
                    }
                    struct Objects
                    {
                        for (i3 = 0; i3 < adds; i3++)
                        {
                            struct Object
                            {
                                uint16 objNumAndType;
                                if (objNumAndType == 0x7ff)
                                {
                                    ulong objNum;
                                }
                                ubyte resourceNum;
                                if (objNumAndType & 0x2000)
                                {
                                    uint16 preloadFrames;
                                }
                                if (objNumAndType & 0x1000)
                                {
                                    U16_StringEntry objName;
                                }
                                if (objNumAndType & 0x800)
                                {
                                    long timeScale;
                                    local float timeScaleDiv = timeScale / 0x10000;
                                }
                                //ulong TransformMtx[4];
                            } obj;
                        }
                    } objs;
                }
                if (flags & PAFrameFlag_HasMoves)
                {
                    ubyte movestmp;
                    if (movestmp == 0xFF)
                    {
                        ushort moves;
                    }
                    else
                    {
                        local ubyte moves = movestmp;
                    }
                    struct MoveObjects
                    {
                        for (i3 = 0; i3 < moves; i3++)
                        {
                            struct MoveObject
                            {
                                uint16 flagsAndObjNum;
                                if (flagsAndObjNum == 0x3ff)
                                {
                                    ulong objNum;
                                }
                                if (flagsAndObjNum & PAMoveFlag_HasMtx)
                                {
                                    ulong MoveTransform[4];
                                    local float MoveTransformADiv = MoveTransform[0] / 65536;
                                    local float MoveTransformBDiv = MoveTransform[1] / 65536;
                                    local float MoveTransformCDiv = MoveTransform[2] / 65536;
                                    local float MoveTransformDDiv = MoveTransform[3] / 65536;
                                }
                                else if (flagsAndObjNum & PAMoveFlag_HasRotate)
                                {
                                    ushort rot;
                                    local ulong rotDiv = rot / 1000;
                                }
                                if (flagsAndObjNum & PAMoveFlag_HasLongCoords)
                                {
                                    long transX; //Div 20
                                    long transY;
                                }
                                else
                                {
                                    short transX;
                                    short transY;
                                }
                                local float LongCoordTransformADiv = transX / 20;
                                local float LongCoordTransformBDiv = transY / 20;
                                if (flagsAndObjNum & PAMoveFlag_HasSrcRect)
                                {
                                    ushort srcRectX;
                                    ushort srcRectY;
                                    ushort srcRectWidth;
                                    ushort srcRectHeight;
                                    local float srcRectXDiv = srcRectX / 20;
                                    local float srcRectYDiv = srcRectY / 20;
                                    local float srcRectWidthDiv = srcRectWidth / 20;
                                    local float srcRectHeightDiv = srcRectHeight / 20;
                                }
                                if (flagsAndObjNum & PAMoveFlag_HasColor)
                                {
                                    ubyte r;
                                    ubyte g;
                                    ubyte b;
                                    ubyte a;
                                }
                                if (flagsAndObjNum & PAMoveFlag_HasAnimFrameNum)
                                {
                                    ushort afn;
                                }
                            } mobjp;
                        }
                    } mobjs;
                }
                if (flags & PAFrameFlag_HasFrameName)
                {
                    U16_StringEntry frameName;
                }
                if (flags & PAFrameFlag_HasCommands)
                {
                    ubyte commands;
                    struct Commands
                    {
                        for (i3 = 0; i3 < commands; i3++)
                        {
                            struct Command
                            {
                                U16_StringEntry cmd;
                                U16_StringEntry prm;
                            } command;
                        }
                    } cmds;
                }
            } af;
        }
    } afs;
};

typedef struct PopCapPopAnimModuleHeader
{
    ulong   magic;
    ulong   version;
};

struct PopCapPopAnimModule
{
    PopCapPopAnimModuleHeader HDR<bgcolor=cPurple>;
    if (HDR.magic != -1158669996)
    {
        Printf("Incorrect header.");
        break;
    }
    if (HDR.version == 6)
    {
        Printf("PopAnim version 6 is not yet supported.");
        //break;
    }
    if (HDR.version > 6)
    {
        Printf("Unknown PopAnim version!");
        break;
    }
    struct AnimInfo
    {
        ubyte animRate;
        ushort animRectX; //Divide by 20
        local ushort animRectXDiv = animRectX / 20;
        ushort animRectY; //Divide by 20
        local ushort animRectYDiv = animRectY / 20;
        ushort animRectWidth; //Divide by 20
        local ushort animRectWidthDiv = animRectWidth / 20;
        ushort animRectHeight; //Divide by 20
        local ushort animRectHeightDiv = animRectHeight / 20;
        ushort numImages;
        struct Images
        {
            for (i = 0; i < numImages; i++)
            {
                struct Image 
                {    
                    U16_StringEntry imageName;
                    //ulong id;
                    if (HDR.version >= 4)
                    {
                        ushort origWidth;
                        ushort origHeight;
                    }
                    if (HDR.version == 1)
                    {
                        ushort TransformXYZ[3];
                    }
                    else
                    {
                        long  TransformABCD[4];
                        local float TransformAMult = TransformABCD[0] / (65536 * 20);
                        local float TransformBMult = TransformABCD[1] / (65536 * 20);
                        local float TransformCMult = TransformABCD[2] / (65536 * 20);
                        local float TransformDMult = TransformABCD[3] / (65536 * 20);
                        short  TransformXY[2];
                        local float TransformXDiv = TransformXY[0] / 20;
                        local float TransformYDiv = TransformXY[1] / 20;
                    }
                } ImageInfo;
            }
        } ImageInfos;
        ushort numSprites;
        struct SpriteDefinitions
        {
            for (i = 0; i < numSprites; i++)
            {
                SpriteDefinition spriteDef;
            }
        } SpriteInfo;
        if (HDR.version > 3)
        {
            Byte_Bool hasMainSpriteDefinition;
        }
        if (HDR.version <= 3 || hasMainSpriteDefinition)
        {
            SpriteDefinition mainSpriteDef;
        }
    } animInfo<bgcolor = cBlue>;
} PAM;