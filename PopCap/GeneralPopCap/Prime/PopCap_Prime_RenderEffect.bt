//------------------------------------------------
//--- 010 Editor v10.0.2 Binary Template
//
//      File: PopCap_Prime_RenderEffect.bt
//      Authors: LolHacksRule
//      Version: 1
//      Purpose: Gets data out of the binary.
//      Category: Deserializing 
//      File Mask: xcfp/pcfx
//      ID Bytes: 70646678
//      History: 
//------------------------------------------------

#include "../../../LHR/Common.bt"

local uint DEBUG_PRINT <hidden=true> = 1;

typedef struct RenderEffectBlock
{
    uint32 count;
    uint32 off;
    uint32 size;
};

typedef struct RenderEffectString
{
    int32 numChars;
    int32 format; //3: Raw Shader (iOS, PS4)
    int32 off;
    //Save pos
    FPos = FTell();
    //Go to strTbl
    FSeek(Header.stringDataOff+off);
    char strEntry[numChars]<bgcolor=cGreen, optimize=false>;
    if (DEBUG_PRINT)
    {
        Printf("%s\n", strEntry);
    }
    //Go back to saved pos
    FSeek(FPos);
};

typedef struct RenderEffectAnnotation
{
    int32 unk;
    int32 index; //Def index
};

typedef struct RenderEffectValue
{
    int32 unk; //Off to Default in string table?
    int32 unk2; //Off to shader past main in string table?
    int32 unk3; //Off to tex name str?
    int32 unk4; //Timestamp?
    int32 unk5; //Timestamp?
    //Vector3_F32 unkv3f;
};


typedef struct RenderEffectShader
{
    int32 formatStringIdx;
    int32 dataStringIdx;
    int32 entryStringIdx;
};

typedef struct RenderEffectSetting
{
    int32 category;
    int32 type;
    int32 settingAnnotationsNum;
    int32 beginVal;
};

typedef struct RenderEffectPass
{
    int32 renderEffectPassNameStrIdx;
    int32 renderEffectPassAnnotationsNum;
    int32 renderEffectPassAnnotationsStartIdx;
    int32 renderEffectPassSettingsNum;
    int32 renderEffectPassSettingsStartIdx;
    int32 renderEffectPassVtxShader;
    int32 renderEffectPassPixelShader;
    if (renderEffectPassSettingsNum > 0)
    {
        struct RenderEffectSettings
        {
            for (i = 0; i < renderEffectPassSettingsNum; i++)
            {
                RenderEffectSetting res;
            }
        } settings;
    }
};

typedef struct RenderEffectTechnique
{
    int32 nameStringIdx;
    int32 techniqueNum;
    int32 renderEffectPassesNum;
    int32 renderEffectPassStartIdx;
    int32 annotationsNum;
    int32 annotationsStartIdx;
    if (renderEffectPassesNum > 0) //Do we exclude this
    {
        struct
        {
            for (i = 0; i < renderEffectPassesNum; i++)
            {
                RenderEffectPass RNDRFXPASS<bgcolor=cBlack, optimize=false>;
            }
        } RenderEffectPasses;
    }
    /*FPos = FTell();
    RenderEffectShader VertexShader;
    RenderEffectShader PixelShader;*/
};

//Works near perfectly on any game that's not PS4/Peggle 2/PVZ2

struct
{
    struct
    {
        char    popFXHeader[4]<bgcolor=cGreen>; //Should be pcfx (PS3/XBOX 360) or fxcp (PS4/iOS/Android/HTML5)
        if (popFXHeader != "xfcp")
        {
            BigEndian();
            Printf("Big Endian\n");
        }
        else
        {
            LittleEndian();
            Printf("Little Endian\n");
        }
        uint32 version<bgcolor=cGreen>; //? Seems only 1 is known
        struct
        {
            RenderEffectBlock TechniqueReadDataBlock<bgcolor=cBlue>;
            RenderEffectBlock AnnotationDataBlock<bgcolor=cLtRed>;
            RenderEffectBlock StringsDataBlock<bgcolor=cLtGreen>;
            RenderEffectBlock ValuesDataBlock<bgcolor=cPurple>;
            RenderEffectBlock RenderEffectPassesDataBlock<bgcolor=cBlack>;
            RenderEffectBlock SettingsDataBlock<bgcolor=cLtPurple>;
            RenderEffectBlock ShadersDataBlock<bgcolor=cDkRed>;
            if (TechniqueReadDataBlock.off > 96) //PopCap didn't bother changing the version, here's a hack to detect it
            {
                RenderEffectBlock UnknownDataBlock<bgcolor=cRed>;
            }
        } RenderEffectBlocks;
        uint32 stringDataOff<bgcolor=cGreen>;
    } Header;
    FSeek(Header.RenderEffectBlocks.TechniqueReadDataBlock.off);
    struct
    {
        for (i = 0; i < Header.RenderEffectBlocks.TechniqueReadDataBlock.count; i++)
        {
            RenderEffectTechnique rndrfxtechnique<bgcolor=cBlue>;
        }
    } RenderEffectTechniques;
    //USE THIS IF BROKEN
    /*FSeek(Header.RenderEffectBlocks.TechniqueReadDataBlock.off);
    byte TechniqueReadData[Header.RenderEffectBlocks.TechniqueReadDataBlock.size];*/
    FSeek(Header.RenderEffectBlocks.RenderEffectPassesDataBlock.off);
    struct
    {
        for (i = 0; i < Header.RenderEffectBlocks.RenderEffectPassesDataBlock.count; i++)
        {
            RenderEffectPass RenderEffectPassPointer<bgcolor=cBlack, optimize=false>;
        }
    } RenderEffectPassPointers;
    if (Header.RenderEffectBlocks.AnnotationDataBlock.count > 0)
    {
        FSeek(Header.RenderEffectBlocks.AnnotationDataBlock.off);
        struct
        {
            for (i = 0; i < Header.RenderEffectBlocks.AnnotationDataBlock.count; i++)
            {
                RenderEffectAnnotation rndrfxannotation<bgcolor=cLtRed>;
            }
        } RenderEffectAnnotations;
    }
    FSeek(Header.RenderEffectBlocks.StringsDataBlock.off);
    struct
    {
        for (i = 0; i < Header.RenderEffectBlocks.StringsDataBlock.count; i++)
        {
            RenderEffectString rndrfxstr<bgcolor=cLtGreen>;
        }
    } RenderEffectStrings;
    //RenderEffectString rstr[Header.RenderEffectBlocks.StringsDataBlock.count]<bgcolor=cGreen, optimize=false>;
    if (Header.RenderEffectBlocks.ValuesDataBlock.count > 0)
    {
        FSeek(Header.RenderEffectBlocks.ValuesDataBlock.off);
        struct
        {
            for (i = 0; i < Header.RenderEffectBlocks.ValuesDataBlock.count; i++)
            {
                RenderEffectValue rndrfxvalue<bgcolor=cPurple>;
                /*struct RenderEffectValue
                {
                    byte ValuesData[Header.RenderEffectBlocks.ValuesDataBlock.size*Header.RenderEffectBlocks.ValuesDataBlock.count]<bgcolor=cPurple>;
                } rndrfxvalue;*/
            }
        } RenderEffectValues;
    }
    if (Header.RenderEffectBlocks.SettingsDataBlock.count > 0)
    {
        FSeek(Header.RenderEffectBlocks.SettingsDataBlock.off);
        byte SettingsData[Header.RenderEffectBlocks.SettingsDataBlock.size*Header.RenderEffectBlocks.SettingsDataBlock.count];
    }
    FSeek(Header.RenderEffectBlocks.ShadersDataBlock.off);
    if (Header.RenderEffectBlocks.ShadersDataBlock.count > 0)
    {
        struct
        {
            for (i = 0; i < Header.RenderEffectBlocks.ShadersDataBlock.count; i++)
            {
                RenderEffectShader ShadersData<bgcolor=cDkRed>;
            }
        } RenderEffectShaders;
    }
    if (Header.RenderEffectBlocks.TechniqueReadDataBlock.off > 96) //Peggle 2 PS4
    {
        FSeek(Header.RenderEffectBlocks.UnknownDataBlock.off);
        byte UnknownData[Header.RenderEffectBlocks.UnknownDataBlock.size*Header.RenderEffectBlocks.UnknownDataBlock.count]<bgcolor=cRed>;
    }
} PopCap_Prime_RenderEffect_PCFX;