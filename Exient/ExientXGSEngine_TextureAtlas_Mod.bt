//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//   File: Exient XGS Engine .ATLAS
//   Authors: Allen (Original, https://zenhax.com/viewtopic.php?t=12375), LHR (mods)
//------------------------------------------------

local int i <hidden=true> = 0;
local int isV1 <hidden=true> = 0;
//Set these if you want close-to-accurate X and Y offsets to use in image editors like PVRTexTool, this is split in files so it's not possible to detect, 2048x4096, 2048x2048, 1024x1024, 512x512, 256x256, 128x128 would probably be recommended.
//ATLAS 1
local int atlas1ManualTexWidth = 1024;
local int atlas1ManualTexHeight = 4096;
//ATLAS 2
local int atlas2ManualTexWidth = 0;
local int atlas2ManualTexHeight = 0;

struct XGSTextureAtlas
{
    LittleEndian();
    char    magic[5];//XGSTA or FTTTA, ha ha very funny First Touch
    short   unknown; //Do not modify, should be 0 I think
    byte    version; //version? AB Trilogy 3DS = 2, do not set to 5+,
    if (version < 5 && version != 2)
    {
        isV1 = 1;
    }
    int32     subTextureCount; //How many %s_%i_of_%i textures are used, cannot be 0.
    int32     texCnt;
    int32     hash; //No effect when modifying, maybe it's a timestamp?
    if (!isV1)
    {
        char    atlasName[32];
    }
    //Read the string table first
    for (i = 0; i < texCnt; i++)
    {
        if (isV1 != 1 && version != 2)
        {
            FSkip(40);
        }
        else
        {
            FSkip(32);
        }
    }
    if (isV1 != 1 && version != 2)
    {
        int32     texNameDataBlockLength;
        struct TextureStrings
        {
            Printf("Texture Names:\n");
            for (i = 0; i < texCnt; i++)
            {
                struct TextureString
                {
                    string texName;
                    Printf("Texture %i: %s\n", i, texName);
                } its;
            }
        } splitTexNameList;
    }

    //Then skip and read the texture info
    FSkip(-texNameDataBlockLength);
    FSkip(-4);
    for (i = 0; i < texCnt; i++)
    {
        if (isV1 != 1 && version != 2)
        {
            FSkip(-40);
        }
    }
    struct SplitTextureInfoList
    {
        Printf("Texture Param:\n");
        for (i = 0; i < texCnt; i++)
        {
            Printf("--------TEXTURE %i START--------\n", i);
            struct InvidualTexInfo
            {
                local string txtrNameStr = splitTexNameList.its[i].texName;
                Printf("Name: %s\n", txtrNameStr);
                int32     hash; //Modifying this will make the game UNABLE to read the texture.
                Printf("Hash: %i\n", hash);
                int32 atlasID; //Atlas ID (Minus 1), where the game will load the texture, must be between subTextureCount! IE 1 means load *_1_of_x.xgt while 2 means load *_2_of_x.xgt, 0 makes the texture not be loaded.
                Printf("Atlas ID: %i\n", atlasID);
                float   scaleX;//scale value. get real coord need * atlas.xgt image width
                Printf("X Scale: %f\n", scaleX);
                float   scaleY;//scale value. get real coord need * atlas.xgt image height 
                Printf("Y Scale: %f\n", scaleY);
                float   scaleWidth;//scale value
                Printf("Scale Width: %f\n", scaleWidth); //Should be this * texWidth, identical to texWidth
                float   scaleHeight;//scale value
                Printf("Scale Height: %f\n", scaleHeight); //Should be this * texHeight, identical to texHeight
                int32     textureWidth;
                Printf("Texture Width: %i\n", textureWidth);
                int32     textureHeight;
                Printf("Texture Height: %i\n", textureHeight);
                if (atlas1ManualTexWidth != 0 && atlas1ManualTexHeight != 0)
                {
                    if (atlasID == 0)
                    {
                        local int32 scaleXMult = scaleX * atlas1ManualTexWidth;
                        local int32 scaleYMult = scaleY * atlas1ManualTexHeight;
                    }
                    if (atlasID == 1)
                    {
                        local int32 scaleXMult = scaleX * atlas2ManualTexWidth;
                        local int32 scaleYMult = scaleY * atlas2ManualTexHeight;
                    }
                    Printf("X Scale (Multiplied): -%i\n", scaleXMult);       
                    Printf("Y Scale (Multiplied): -%i\n", scaleYMult);
                }
                if (isV1 != 1 && version != 2)
                {
                    int32     unk1;
                    Printf("unk1: %i\n", unk1);
                    int32     unk2;
                    Printf("unk2: %i\n", unk2);
                }
            } iti;
            Printf("--------TEXTURE %i END----------\n", i);
        }
    } splitTexInfoList;
} XGSTA;