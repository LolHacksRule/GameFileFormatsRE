//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: ExientXGSEngineLocale.bt
//   Authors: LolHacksRule
//   Version: 1
//   Purpose: Reading of XGS Localization, a little harder but readable
//  Category: Localization
// File Mask: XGSL
//  ID Bytes: 5847534C
//   History: 
//------------------------------------------------

//Ver 1 appears to be identical to 2, without the font table
//Ver 0 uses unicode

local int i <hidden=true> = 0;
local int i2 <hidden=true> = 0;

struct XGSL
{
    LittleEndian();
    struct HDR
    {
        char XGSL[4];
        int32 dmy;
        int32 ver; //guess
        Printf("XGS Locale\nVersion: %i\n", ver);
        int32 localizationEntries;
    } hdr<bgcolor = cRed>;
    struct Meta
    {
        int32 strCnt;
        Printf("String Count: %i\n", strCnt);
        int32 FileSize;
        Printf("FileSize: %i\n", FileSize);
        if (hdr.ver >= 2)
        {
            int32 fontTblOffset;
            Printf("Font Table Offset: %i\n", fontTblOffset);
            int32 unk5;
        }
        struct LocMetaTbl
        {
            for (i = 0; i < hdr.localizationEntries; i++)
            {
                struct LocMeta
                {
                    int32 strSize;
                    Printf("String Block Size [%i]: %i\n", i, strSize);
                    int32 unk;
                } locMeta;
            }
        } locMetaTbl;
    } meta<bgcolor = cBlue>;
    //int32 StrIDTblBSize;
    //int32 unk6;
    //int32 ENGBsize;
    //int32 unk7;
    //int32 rusbsize;
    //int32 Unk;
    struct Strings
    {
        struct StringIDs
        {
            Printf("-----String IDs-----\n");
            for (i = 0; i < meta.strCnt; i++)
            {
                struct StringID
                {
                    if (hdr.ver >= 1)
                    {
                        string theStrID;
                        Printf("[%i]: %s\n", i, theStrID);
                    }
                    else
                    {
                        wstring theWStrID;
                        Printf("[%i]: %s\n", i, theWStrID);
                    }
                } localizedStringID;
            }
        } localizedStringIDs;
        Printf("-----End String IDs-----\n");
        struct LocalizedStrings
        {
            Printf("-----Strings-----\n");
            for (i = 0; i < hdr.localizationEntries - 1; i++)
            {
                struct Language
                {
                    Printf("[Lang: %i]\n", i);
                    for (i2 = 0; i2 < meta.strCnt; i2++)
                    {
                        struct String
                        {
                            if (hdr.ver >= 1)
                            {
                                string theStr;
                                Printf("[%i]: %s\n", i2, theStr);
                            }
                            else
                            {
                                wstring theWStr;
                                Printf("[%i]: %s\n", i2, theWStr);
                            }
                        } localizedString;
                    }
                } lang;
            }
        } locStrings;
        Printf("-----End of Strings-----\n");
    } strings<bgcolor = cGreen>;
    /*struct Strings
    {
        for (i = 0; i < strCnt; i++)
        {
            struct StrIDTbl
            {
                string st;
            } strids;
        }
        for (i = 0; i < strCnt; i++)
        {
            struct ENStrTbl
            {
                string st;
            } ENstrids;
        }
        for (i = 0; i < strCnt; i++)
        {
            struct RUStrTbl
            {
                string st;
            } RUstrids;
        }
    } strings;*/
    if (hdr.ver == 2)
    {
        Printf("Font Strings\n");
        struct FontTbl
        {
            int32 fntFiles;
            Printf("Font Files: %i\n", fntFiles);
            for (i = 0; i < fntFiles; i++) //temp until 
            {
                struct FontStrs
                {
                    uint16 fontNameStrSize;
                    char fontNameStr[fontNameStrSize];
                    uint16 pakStrSize;
                    if (pakStrSize > 1)
                    {
                        char pakStr[pakStrSize];
                        Printf("[%i]: %s %s \n", i, pakStr, fontNameStr);
                    }
                    else
                    {
                        FSkip(4);
                        Printf("[%i]: %s \n", i, fontNameStr);
                    }
                    Printf("[%i]: %s %s \n", i, pakStr, fontNameStr);
                } font;
                FSkip(2);
            }
        } ftbl;
    }
    
    //byte Version;
    
    //uint64 StringCnt;
} XGSLocale;