//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: ExientXGSEngineLangDatabase.bt
//   Authors: LolHacksRule
//   Version: 1
//   Purpose: Reading of XGS Localization, a little harder but readable
//  Category: Localization
// File Mask: XGSL
//  ID Bytes: 5847534C
//   History: 
//------------------------------------------------

//Ver 1 appears to be identical to 2, without the font table
//Ver 0 uses unicode

local int i <hidden=true> = 0;
local int i2 <hidden=true> = 0;
local string tempLang <hidden = true> = "";
local string tempStringID <hidden = true> = "";
local int printStrings <hidden=true> = 0; //Set this to 1 to print strings

typedef enum <int32>
{
    English,
    French,
    German,
    Italian,
    Spanish,
    Japanese,
    StringIDs, //Always 6
    Dutch,
    Chinese,
    Portugeuse,
    Russian, //Portuguese (Brazil) that's funny Exient
    Arabic,
    Russian_Old,
    Portugeuse_Old,
    Korean = 31,
} LangType;

struct XGSLangDataBase
{
    LittleEndian();
    struct HDR
    {
        char XGSL[4]; //Or maybe it's FTTL, First Touch taking credit of an already identical format.
        int32 dmy; //init?
        int32 ver; //guess, it has to be
        if (printStrings == 1)
        {
            Printf("XGS Locale\nVersion: %i\n", ver);
        }
        int32 localizationEntries;
    } hdr<bgcolor = cRed>;
    struct Meta
    {
        int32 strCnt;
        if (printStrings == 1)
        {
            Printf("String Count: %i\n", strCnt);
        }
        int32 FileSize;
        if (printStrings == 1)
        {
            Printf("FileSize: %i\n", FileSize);
        }
        if (hdr.ver >= 2)
        {
            int32 fontTblOffset;
            if (printStrings == 1)
            {
                Printf("Font Table Offset: %i\n", fontTblOffset);
            }
            int32 unk5;
        }
        struct LocMetaTbl
        {
            for (i = 0; i < hdr.localizationEntries; i++)
            {
                struct LocMeta
                {
                    int32 strSize;
                    LangType LanguageType;
                    if (printStrings == 1)
                    {
                        Printf("String Block Size [%i]: %i\nLanguage ID: %i\n", i, strSize, 
LanguageType);
                    }
                } locMeta;
            }
        } locMetaTbl;
    } meta<bgcolor = cBlue>;
    //int32 StrIDTblBSize;
    //int32 unk6;
    //int32 ENGBsize;
    //int32 unk7;
    //int32 rusbsize;
    //int32 Unk;
    struct Strings
    {
        /*struct StringIDs
        {
            Printf("-----String IDs-----\n");
            for (i = 0; i < meta.strCnt; i++)
            {
                struct StringID
                {
                    if (hdr.ver >= 1)
                    {
                        string theStrID;
                        //Printf("[%i]: %s\n", i, theStrID);
                    }
                    else
                    {
                        wstring theWStrID;
                        //Printf("[%i]: %s\n", i, theWStrID);
                    }
                } localizedStringID;
            }
        } localizedStringIDs;
        Printf("-----End String IDs-----\n");
        */
        //struct LocalizedStrings
        //{
            if (printStrings == 1)
            {
                Printf("-----Strings-----\n");
            }
            for (i = 0; i < hdr.localizationEntries; i++)
            {
                struct Language
                {
                    if (meta.locMetaTbl.locMeta[i].LanguageType == English)
                    {
                        tempLang = "English";
                    }
                    if (meta.locMetaTbl.locMeta[i].LanguageType == French)
                    {
                        tempLang = "French";
                    }
                    if (meta.locMetaTbl.locMeta[i].LanguageType == German)
                    {
                        tempLang = "German";
                    }
                    if (meta.locMetaTbl.locMeta[i].LanguageType == Italian)
                    {
                        tempLang = "Italian";
                    }
                    if (meta.locMetaTbl.locMeta[i].LanguageType == Spanish)
                    {
                        tempLang = "Spanish";
                    }
                    if (meta.locMetaTbl.locMeta[i].LanguageType == Japanese)
                    {
                        tempLang = "Japanese";
                    }
                    if (meta.locMetaTbl.locMeta[i].LanguageType == StringIDs)
                    {
                        tempLang = "String IDs";
                    }
                    if (meta.locMetaTbl.locMeta[i].LanguageType == Dutch)
                    {
                        tempLang = "Dutch";
                    }
                    if (meta.locMetaTbl.locMeta[i].LanguageType == Chinese)
                    {
                        tempLang = "Chinese";
                    }
                    if (meta.locMetaTbl.locMeta[i].LanguageType == Portugeuse || meta.locMetaTbl.locMeta[i].LanguageType == Portugeuse_Old)
                    {
                        tempLang = "Portugeuse";
                    }
                    if (meta.locMetaTbl.locMeta[i].LanguageType == Russian || meta.locMetaTbl.locMeta[i].LanguageType == Russian_Old)
                    {
                        tempLang = "Russian";
                    }
                    if (meta.locMetaTbl.locMeta[i].LanguageType == Arabic)
                    {
                        tempLang = "Arabic";
                    }
                    if (meta.locMetaTbl.locMeta[i].LanguageType == Korean)
                    {
                        tempLang = "Korean";
                    }
                    if (meta.locMetaTbl.locMeta[i].LanguageType > Korean)
                    {
                        tempLang = "Unknown!"; //for now
                    }
                    local string theLanguage = tempLang;
                    if (printStrings == 1)
                    {
                        Printf("[%s]\n", tempLang);
                    }
                    for (i2 = 0; i2 < meta.strCnt; i2++)
                    {
                        struct String
                        {
                            /*if (i != 0)
                            {
                                //local string theStringID = tempStringID;
                            }*/
                            if (hdr.ver >= 1)
                            {
                                /*if (i != 0)
                                {
                                    //tempStringID = lang[0].localizedString[i2].theStr;
                                }*/
                                string theStr;
                                if (printStrings == 1)
                                {
                                    Printf("[%i]: %s\n", i2, theStr);
                                }
                            }
                            else
                            {
                                wstring theWStr;
                                /*
                                if (i != 0)
                                {
                                    //tempStringID = lang[0].localizedString[i2].theWStr;
                                }*/
                                if (printStrings == 1)
                                {    
                                    Printf("[%i]: %s\n", i2, theWStr);
                                }
                            }
                        } localizedString;
                    }
                } lang;
                if (printStrings == 1)
                {
                    Printf("[%s end]\n", tempLang);
                }
            }
        //} locStrings;
        if (printStrings == 1)
        {
            Printf("-----End of Strings-----\n");
        }
    } strings<bgcolor = cGreen>;
    /*struct Strings
    {
        for (i = 0; i < strCnt; i++)
        {
            struct StrIDTbl
            {
                string st;
            } strids;
        }
        for (i = 0; i < strCnt; i++)
        {
            struct ENStrTbl
            {
                string st;
            } ENstrids;
        }
        for (i = 0; i < strCnt; i++)
        {
            struct RUStrTbl
            {
                string st;
            } RUstrids;
        }
    } strings;*/
    if (hdr.ver == 2)
    {
        if (printStrings == 1)
        {
            Printf("Font Strings\n");
        }
        struct FontTbl
        {
            int32 fntFiles;
            if (printStrings == 1)
            {
                Printf("Font Files: %i\n", fntFiles);
            }
            for (i = 0; i < fntFiles; i++) //temp until 
            {
                struct FontStrs
                {
                    uint16 fontFileNameStrSize<hidden = true>;
                    char fontFileNameStr[fontFileNameStrSize];
                    uint16 pakStrSize<hidden = true>;
                    if (pakStrSize > 1)
                    {
                        char pakStr[pakStrSize];
                    }
                    else
                    {
                        FSkip(4);
                    }
                    uint16 fontNameSize<hidden = true>;
                    if (fontNameSize != 0)
                    {
                        char fontNameStr[fontNameSize];
                        if (printStrings == 1)
                        {
                            Printf("[%i]: %s %s %s \n", i, pakStr, fontFileNameStr, fontNameStr);
                        }
                    }
                    else
                    {
                        if (printStrings == 1)
                        {
                            Printf("[%i]: %s %s \n", i, pakStr, fontFileNameStr);
                        }
                    }
                } font;
            }
        } ftbl<bgcolor=cPurple>;
    }
} XGSL;