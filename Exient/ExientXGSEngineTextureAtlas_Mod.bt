//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//   File: Exient XGS Engine .ATLAS
//   Authors: Allen (Original, https://zenhax.com/viewtopic.php?t=12375), LHR (mods)
//------------------------------------------------

local int i <hidden=true> = 0;
local int isV1 <hidden=true> = 0;
//Set these if you want close-to-accurate X and Y offsets to use in image editors like PVRTexTool, this is split in files so it's not possible to detect, 2048x4096, 2048x2048, 1024x1024, 512x512, 256x256, 128x128 would probably be recommended.
local int manualTexHeight = 0;
local int manualTexWidth = 0;

struct XGSTextureAtlas
{
    LittleEndian();
    char    magic[5];//XGSTA or FTTTA, ha ha very funny First Touch
    short   unknown; //Do not modify, should be 0 I think
    byte    version; //version? AB Trilogy 3DS = 2, do not set to 5+,
    if (version < 5 && version != 2)
    {
        isV1 = 1;
    }
    int     subTextureCount; //How many %s_x_of_x textures are used, cannot be 0.
    int     texCnt;
    int     hash;//No effect when modifying, maybe it's a timestamp?
    if (!isV1)
    {
        char    atlasName[32];
    }
    struct SplitTextureInfoList
    {
        Printf("Texture Param:\n");
        for (i = 0; i < texCnt; i++)
        {
            Printf("--------TEXTURE %i START--------\n", i);
            struct InvidualTexInfo
            {
                int     hash; //Modifying this will make the game UNABLE to read the texture.
                Printf("hash: %i\n", hash);
                int32 atlasID; //Atlas ID (Minus 1), where the game will load the texture, must be between subTextureCount! IE 1 means load *_0_of_x.xgt while 2 means load *_1_of_x.xgt, 0 makes the texture not be loaded.
                Printf("Atlas ID: %i\n", atlasID);
                float   scaleX;//scale value. get real coord need * atlas.xgt image width
                Printf("X Scale: %f\n", scaleX);
                float   scaleY;//scale value. get real coord need * atlas.xgt image height 
                Printf("Y Scale: %f\n", scaleY);
                float   scaleWidth;//scale value
                Printf("Scale Width: %f\n", scaleWidth);
                float   scaleHeight;//scale value
                Printf("Scale Height: %f\n", scaleHeight);
                int     textureWidth;
                Printf("Texture Width: %i\n", textureWidth);
                int     textureHeight;
                Printf("Texture Height: %i\n", textureHeight);
                //the first is always -2 or -3 which would translate to 0 so don't show it
                if (manualTexHeight != 0 && manualTexHeight != 0)
                {
                    local int scaleXMult <hidden=true> = scaleX * manualTexHeight;
                    if (scaleXMult >= 4)
                    {
                        Printf("X Scale (Multiplied): -%i\n", scaleXMult);
                    }                
                    local int scaleYMult <hidden=true> = scaleY * manualTexWidth;
                    if (scaleYMult >= 4)
                    {
                        Printf("Y Scale (Multiplied): -%i\n", scaleYMult);
                    }   
                }
                if (isV1 != 1 && version != 2)
                {
                    int     unk1;
                    Printf("unk1: %i\n", unk1);
                    int     unk2;
                    Printf("unk2: %i\n", unk2);
                }
            } iti;
            Printf("--------TEXTURE %i END--------\n", i);
        }
    } splitTexInfoList;
    if (isV1 != 1 && version != 2)
    {
        int     texNameDataBlockLength;
        struct TextureStrings
        {
            Printf("Texture Names:\n");
            for (i = 0; i < texCnt; i++)
            {
                struct TextureString
                {
                    string texName;
                    Printf("Texture %i: %s\n", i, texName);
                } its;
            }
        } splitTexNameList;
    }
} XGSTA;