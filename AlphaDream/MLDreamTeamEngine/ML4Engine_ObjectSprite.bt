//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

//Format specs:
//Yoshi's Lighthouse: Dream Team Hacking Documentation + Discord

#include "ML4Engine_Common.bt"
#include "../../LHR/Common.bt"

local int totalFrames <hidden=true> = 0;
local int totalParts <hidden=true> = 0;
local int isML3R <hidden=true> = 0;
local int isML1DX <hidden=true> = 0;

typedef struct Animation
{
    uint16 frameEntriesOff;
    uint16 frameEntriesCnt;
    totalFrames = totalFrames + frameEntriesCnt; //Hack, detect multiple frames
    uint16 animLen;
    uint16 animXFormEntryOff;
    if (isML3R)
    {
        int16 unk;
        int16 unk2;
        int16 unk3;
        int16 unk4;
    }
};

typedef struct AnimationXFormation //Check
{
    Vector3_F32 x;
    Vector3_F32 y;
    Vector3_F32 z;
    Vector3_F32 w;
};

typedef struct FrameXForm //Check
{
    Vector2_F32 scale;
    Vector2_F32 rot;
    int16 trans[2];
};

typedef struct PartXForm //Check
{
};

typedef struct Frame
{
    uint16 partEntriesOff;
    uint16 partEntriesCnt;
    //totalParts = totalParts + partEntriesCnt; //Hack, detect multiple parts
    uint16 animLenOff;
    uint16 frameXFormEntryOff;
};

typedef struct Part
{
    ML4Engine_PartSizeType partSizeID;
    /*local uint32 targetBPP<hidden=true> = 0;
    if (partSizeID == 0)
    {
        targetBPP = 128;
    }
    else if (partSizeID == 1 || partSizeID == 5 || partSizeID == 9)
    {
        targetBPP = 512*8;
    }
    else if (partSizeID == 2)
    {
        targetBPP = 2048*2;
    }
    else if (partSizeID == 3)
    {
        targetBPP = 8192;
    }
    else if (partSizeID == 4 || partSizeID == 8)
    {
        targetBPP = 256;
    }
    else if (partSizeID == 6 || partSizeID == 10)
    {
        targetBPP = 1024*4;
    }
    else if (partSizeID == 7 || partSizeID == 11) //?
    {
        targetBPP = 4096;
    }
    else if (partSizeID > 11) //?
    {
        targetBPP = 8192;
    }
    //Printf("%i\n", targetBPP);*/
    ML4Engine_Flip flip;
    uint16 partXFormationsEntryOff;
    int16 unk<bgcolor=cRed>;
    uint16 gfxFileOff<bgcolor=cPurple>;
    //local uint32 trueGfxFileOff<hidden=false> = (gfxFileOff * targetBPP/32);
    //Printf("%s\t%s\t%i\t\t\t%i\t%i", EnumToString(partSizeID), EnumToString(flip), partXFormationsEntryOff, unk, trueGfxFileOff);
    if (!isML3R && !isML1DX)
    {
        int16 x;
        int16 y;
        //Printf("\t\t%i\t%i\n", x, y);
    }
    else
    {
        //Printf("\n");
    }
};

typedef struct ImageInfo
{
    //int16 unk[2]; //first one is most likely images
    int16 images<bgcolor=cGreen>;
    int16 unknowns<bgcolor=cRed>;
    int16 width;
    int16 height;
    //uint16 intUnkDatas;
    /*if (ObjectSpriteHeader.graphicsfmtid == 0)
    {
        byte unknownDatas[(unknowns*21)-2];
    }
    if (ObjectSpriteHeader.graphicsfmtid == 4)
    {
        byte unknownDatas[unknowns*28];
    }*/
    //uint16 unk;
    while (FPos < ObjectSpriteHeader.framesOff-(images*8)) //taken from 00002.bin, 00065.bin [EN root start menu] (also 00062.bin [JP root start menu] ), 000434.bin of MObj of ML4, either 2, 4 or 6 bytes per entry, doesn't seem to match with 00964.bin
    {
        struct
        {
            //byte unkchunk;
            //int16 unk2;
            //int16 unk3;
            //int16 x;
            //int16 y;
            //int16 unk2;
            //int16 w;
            //int16 h;
            byte unk;
        } ImageDef<hidden=true, bgcolor=cRed>;
        FPos = FTell();
    }
    //Printf("Sprite\tX Position\tY Position\tWidth\tHeight\n");
    struct //def correct, apply - for offsets in a tool like PVRTexTool with the converted texture
    {
        int16 x;
        int16 y;
        int16 w;
        int16 h;
        //Printf("%i\t%i\t%i\t%i\t%i\n", i, x, y, w, h);
        i++;
    } ImagePlacementDefinitions[images]<bgcolor=cGreen, optimize=false>;
    i = 0;
};

typedef struct ML3R_Unknown
{
    while (FPos < EOF) 
    {
        byte floatVal;
        FPos = FTell();
    }
};

typedef struct Header
{
    byte animations<bgcolor=cLtBlue>;
    ML4Engine_TexFmt graphicsfmtid<bgcolor=cPurple>;
    uint16 unk<bgcolor=cRed>;
    uint32 fSize;
    uint32 gfxFSize<bgcolor=cPurple>;
    //Dies here on ML3R, todo fix
    if (fSize < ReadInt()) //kinda
    {
        isML3R = 1;
        uint32 ML3R_unk<bgcolor=cRed>; //is it u32
        uint32 ML3R_unk2<bgcolor=cRed>; //is it u32
    }
    uint32 framesOff<bgcolor=cDkBlue>;
    uint32 partsOff<bgcolor=cDkPurple>;
    uint32 possiblyAnimXFormationsOff<bgcolor=cLtRed>;
    uint32 frameTransOff<bgcolor=cBlue>;
    uint32 partTransOff<bgcolor=cLtPurple>;
    if (isML3R)
    {
        uint32 ML3RUnknownDataOff<bgcolor=cRed>;
        uint32 zero<bgcolor=cRed>;
    }
    byte unk4[64]<bgcolor=cRed>;
    if (ReadInt() == -16777216)
    {
        isML1DX = 1;
        byte ML1DXPad[4];
    }
};

struct
{
    LittleEndian();
    Header ObjectSpriteHeader<bgcolor=cAqua>;
    Animation Animations[ObjectSpriteHeader.animations]<optimize=false, bgcolor=cLtBlue>;
    FPos = FTell();
    if (ObjectSpriteHeader.partsOff == 0)
    {
        ImageInfo ImageInfoData<bgcolor=cPurple>;
        FSeek(ObjectSpriteHeader.framesOff);
    }
    //Frame Frames[totalFrames]<optimize=false, bgcolor=cDkBlue>;
    if (ObjectSpriteHeader.partsOff > 0)
    {
        FSeek(ObjectSpriteHeader.partsOff);
        FPos = FTell();
        struct
        {
            //Printf("Part Size ID\t\tFlip\t\tPart Transformation Offset\tUnknown\tGraphics File Offset\tX Offset\t Y Offset\n");
            while (FPos < ObjectSpriteHeader.possiblyAnimXFormationsOff) 
            {
                Part PartStruct<optimize=false, bgcolor=cDkPurple>;
                FPos = FTell();
            }
        } Parts;
    }
    FPos = FTell();
    if (FPos != ObjectSpriteHeader.fSize)
    {
        if (ObjectSpriteHeader.possiblyAnimXFormationsOff != ObjectSpriteHeader.frameTransOff)
        {
            byte AnimTransformData[ObjectSpriteHeader.frameTransOff - ObjectSpriteHeader.possiblyAnimXFormationsOff];
        }
        //byte FrameTransformData[ObjectSpriteHeader.partTransOff - ObjectSpriteHeader.frameTransOff];
        if (ObjectSpriteHeader.frameTransOff != ObjectSpriteHeader.partTransOff) //Part trans go first
        {
            struct
            {
                while (FPos < ObjectSpriteHeader.partTransOff) 
                {
                    FrameXForm FrameTransform;
                    FPos = FTell();
                }
            } FrameTransforms<bgcolor=cBlue>;
            //FrameXForm FrameTransforms[ObjectSpriteHeader.animations]<bgcolor=cBlue>; //For now we're using the above unless we can determine the amount of frame transforms
        }
        if (isML3R || isML1DX)
        {
            if (ObjectSpriteHeader.ML3RUnknownDataOff != 0)
            {
                byte PartTransformData[ObjectSpriteHeader.ML3RUnknownDataOff - ObjectSpriteHeader.partTransOff]<bgcolor=cLtRed>;
                FSeek(ObjectSpriteHeader.ML3RUnknownDataOff);
            }
            ML3R_Unknown ML3RUnknownData<bgcolor=cDkRed>;
        }
        else
        {
            byte PartTransformData[ObjectSpriteHeader.fSize - ObjectSpriteHeader.partTransOff]<bgcolor=cLtRed>;
        }
    }
    /*if (FPos != ObjectSpriteHeader.fSize)
    {
        if (ObjectSpriteHeader.frameTransOff != ObjectSpriteHeader.possiblyAnimXFormationsOff)
        {
            AnimationXFormation AnimationTransformations;
        }
        //if (ObjectSpriteHeader.frameTransOff != ObjectSpriteHeader.partTransOff)
        {
            FSeek(ObjectSpriteHeader.frameTransOff);
            struct
            {
                while (FPos < ObjectSpriteHeader.partTransOff) 
                {
                    FrameXForm FrameTransform;
                    FPos = FTell();
                }
            } FrameTransforms;
        }
    }
    if (isML3R)
    {
        FSeek(ObjectSpriteHeader.ML3RUnknownDataOff);
        ML3R_Unknown unknown;
    }*/
} ObjectSprite;