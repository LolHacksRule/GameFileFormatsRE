//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

//Format specs:
//https://github.com/hadashisora/MnLDTools/blob/master/MnL4MapReader/Form1.cs
//FruityLoops doc in Yoshi Lighthouse Discord

local uint isML4 <hidden=true> = 0;
local uint isML5 <hidden=true> = 0;
local uint isML1R <hidden=true> = 1;
local uint isML3R <hidden=true> = 0;
local uint sections <hidden=true> = 0;

#include "../../LHR/Common.bt"
#include "../MLBowsersInsideStory_R/ML3R_Common.bt" //3: Some string table?, 9: Some other string table?
#include "../MLPaperJamEngine/ML5Engine_Common.bt"

typedef struct SectionEntry
{
    uint32 off;
    uint32 size;
};

typedef struct Section
{
    byte data[SectionDefinitions.SectionDefinition[i].size];
};

struct FieldMap
{
    FPos = FTell();
    LittleEndian();
    if (ReadUInt() == 0)
    {
        local uint toFindSections = 104; //Fix ML3R
    }
    else
    {
        uint32 toFindSections<hidden=true>; //Off of the first one but using as sections*8
        FSkip(-4);
    }
    sections = toFindSections/8; //So do this to get the sections
    struct
    {
        for (i = 0; i < sections; i++) //Neat little hack
        {
            SectionEntry SectionDefinition<bgcolor=cGreen>; //14 in ML5, 15 in ML3R
        }
    } SectionDefinitions;
    struct
    {
        //FSeek(FieldMapHeader.Section[0].off);
        //UnknownSection unk;
        //GraphicsConfigSection gfxCFGSection;
        for (i = 0; i < sections; i++)
        {
            FSeek(SectionDefinitions.SectionDefinition[i].off);
            if (SectionDefinitions.SectionDefinition[i].size && SectionDefinitions.SectionDefinition[i].off)
            {
                Printf("SECTION %i IS USED\n", i);
                if (isML4)
                {
                    switch (i) //Read ML4 structs
                    {
                        case 1: Section ML4_GraphicsSection<bgcolor=cBlue>; break;
                        case 8: Section ML4_CameraLockSection<bgcolor=cBlue>; break;
                        case 12: Section ML4_FieldModelSection<bgcolor=cGreen>; break;
                        default: Section UnknownSection<bgcolor=cRed>; break;
                    }
                }
                else if (isML5)
                {
                    switch (i) //Read ML5 structs
                    {
                        //I'm highly convinced 8 is camera l
                        case 12: ML5Engine_FieldMapFloatStruct ML5_SomeFloatSection<bgcolor=cBlue>; break;
                        case 13: ML5Engine_FieldMapOtherFloatStruct ML5_SomeOtherFloatSection<bgcolor=cBlue>; break;
                        default: Section UnknownSection<bgcolor=cRed>; break;
                    }
                }
                else if (isML1R)
                {
                    switch (i) //Read ML5 structs
                    {
                        //I'm highly convinced 8 is camera l
                        case 3: Section ML1R_SomeStringStruct<bgcolor=cBlue>; break;
                        case 9: Section ML1R_AnotherOtherStringStruct<bgcolor=cBlue>; break;
                        default: Section UnknownSection<bgcolor=cRed>; break;
                    }
                }
                else if (isML3R)
                {
                    switch (i) //Read ML3R structs
                    {
                        case 14: Section ML3R_SomeTextSection<bgcolor=cBlue>; break;
                        case 16: ML5Engine_FieldMapFloatStruct ML3R_SomeFloatSection<bgcolor=cBlue>; break;
                        case 17: ML5Engine_FieldMapOtherFloatStruct ML3R_SomeOtherFloatSection<bgcolor=cBlue>; break;
                        default: Section UnknownSection<bgcolor=cRed>; break;
                    }
                }
                else
                {
                    Section UnknownSection<bgcolor=cRed>; //In ML5, section 13 and 14 is i32 V3Fs, section 11/12 is unk (2 i32s?) > i32 V3Fs
                }
            }
            else
            {
                Printf("WARNING SECTION %i IS EMPTY\n", i);
            }
        }
        //byte pad[75];
        //FSeek(FieldMapHeader.modelSec.modelOff);
        //FSeek(FieldMapHeader.Section[11].off);
        //byte model[FieldMapHeader.Section[12].size]<bgcolor=cGreen>;
    } Sections;
} MAP_BIN;