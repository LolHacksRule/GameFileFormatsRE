//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "../../LHR/Common.bt"
#include "ML5Engine_Common.bt"

//Orig source: https://www.tapatalk.com/groups/lighthouse_of_yoshi/bd-dat-item-equipment-enemy-etc-data-t815.html

//Only tested on Paper Jam!

typedef enum <uint16>
{
    IF_HP,
    IF_BP,
    IF_Revive,
    IF_CureStats,
    IF_HPAndBP,
    IF_AddHP,
    IF_AddBP,
    IF_POW,
    IF_DEFENSE,
    IF_SPEED,
    IF_STACHE,
    IF_Unknown, //Unused in ML5
    IF_DamageImmunity,
} ItemFlag;

typedef enum <uint32>
{
    Accessory = 24,
    Wear = 26,
    Gloves = 28,
    Boots = 30,
    Hammer = 32,
    PaperMario_Accessory = 42,
    PaperMario_Wear = 44,
    PaperMario_Gloves = 46,
    PaperMario_Boots = 48,
    PaperMario_Hammer = 50,
} GearCategory;

typedef struct MultiLocMessages
{
    ML5Engine_StringEntry itemNameMsg;
    ML5Engine_StringEntry itemNamePluralMsg;
    ML5Engine_StringEntry itemDescMsg;
    ML5Engine_StringEntry itemFullMsg;
};

typedef struct ItemEntry
{
    MultiLocMessages multiLocs;
    byte unk[8];
    ItemFlag flag;
    uint16 points;
    byte unk2[4];
};

typedef struct WearStats
{
    uint16 hp;
    uint16 unk;
    uint16 pow;
    uint16 defense;
    uint16 speed;
    uint16 stache;
    uint16 unk2[6];
};

typedef struct GearEntry
{
    MultiLocMessages multiLocs;
    GearCategory gearCategory;
    //uint32 tmp;
    uint32 buyPrice;
    local uint32 sellPrice = buyPrice/2;
    if (gearCategory == Wear || gearCategory == PaperMario_Wear || gearCategory == Gloves || gearCategory == PaperMario_Gloves)
    {
        WearStats wearStats;
    }
    else
    {
        uint32 unk2;
        uint32 jumpPOW;
        uint16 unk3;
        byte unk4[14];
        //Printf("%s: %i\n", multiLocs.itemDescMsg.stringEntry, unk4[3]);
    }
};

typedef struct BattleCardEntry
{
    MultiLocMessages multiLocs;
    uint32 thirtyfour; //Always 34, why, is that what a Battle Card is?
    uint32 shopPrice;
    byte unk2[4];
    uint32 amount;
    byte amount2;
    uint16 zero;
    byte starPoints;
    //Printf("%s: %x\n", multiLocs.itemDescMsg.stringEntry, unk2[0]);
    byte unk3[4];
};

typedef struct EnemyEntry
{
    ML5Engine_StringEntry name;
    byte level;
    byte unk;
    uint16 HP;
    uint16 pow;
    uint16 defense;
    uint16 speed;
    uint16 unk2[2];
    uint16 unk3[2];
    uint16 unk4;
    uint16 exp;
    uint16 coins;
    uint16 unk5;
    ML5Engine_StringEntry itemReward;
    uint16 itemRarityPct;
    ML5Engine_StringEntry rareItemReward;
    uint16 rareItemRarityPct;
    if (ReadByte() == 45) //This happens on Roy (ML5), temp hack
    {
        byte unk6[510];
    }
};

typedef struct ItemData
{
    FPos = FTell();
    while (FPos != Header.unkOff[0])
    {
        ItemEntry iEntry;
        FPos = FTell();
    }
};

typedef struct GearData
{
    while (FPos != Header.unkDataOff2[0])
    {
        GearEntry gEntry;
        FPos = FTell();
    }
};

typedef struct BattleCardData
{
    while (FPos != Header.unkDataOff3[0])
    {
        BattleCardEntry bEntry;
        FPos = FTell();
    }
};

typedef struct EnemyData
{
    while (FPos != Header.unkDataOff4[0])
    {
        EnemyEntry eEntry;
        FPos = FTell();
    }
};

struct
{
    struct
    {
        uint32 itemDataOff<bgcolor=cDkGreen>; //56: MLPJ, 64: ML3DX, 100: ML1DX
        uint32 unkOff[2]<bgcolor=cRed>;
        uint32 gearDataOff<bgcolor=cLtGreen>;
        uint32 unkDataOff2[2]<bgcolor=cRed>;
        if (itemDataOff > 56)
        {
            uint32 badgeDataOff<bgcolor=cPurple>;
        }
        else
        {
            uint32 battleCardDataOff<bgcolor=cPurple>;
        }
        uint32 unkDataOff3[2]<bgcolor=cRed>;
        if (itemDataOff == 100)
        {
            uint32 accessoryDataOff;
            uint32 unkDataOffML1DX[2]<bgcolor=cRed>;
            uint32 eventItemDataOff;
            uint32 unkDataOffML1DX2[2]<bgcolor=cRed>;
            uint32 beanDataOff;
            uint32 unkDataOffML1DX3[2]<bgcolor=cRed>;
            uint32 specialEffectDataOff[3];
            uint32 unkDataOffML1DX4[2]<bgcolor=cRed>;
        }
        if (itemDataOff == 64)
        {
            uint32 effectDataOff;
            uint32 badgeEffectDataOff;
            uint32 unkDataOffML3DX1[3];
        }
        uint32 enemyDataOff<bgcolor=cLtPurple>;
        if (itemDataOff == 56)
        {
            uint32 unkDataOff4[4]<bgcolor=cRed>;
        }
        else
        {
            uint32 unkDataOffNonML5;
        }
    } Header;
    FSeek(Header.itemDataOff);
    ItemData ItemDataStruct<bgcolor=cDkGreen>;
    byte UnknownData1[Header.unkOff[1]-Header.unkOff[0]]<bgcolor=cRed>; //Unicode Glyph cache?
    byte UnknownData2[Header.gearDataOff-Header.unkOff[1]]<bgcolor=cRed>; //Unicode Glyph cache?
    FSeek(Header.gearDataOff);  
    GearData GearDataStruct<bgcolor=cLtGreen>;
    byte UnknownData3[Header.unkDataOff2[1]-Header.unkDataOff2[0]]<bgcolor=cRed>; //Unicode JP Glyph cache?
    byte UnknownData4[Header.battleCardDataOff-Header.unkDataOff2[1]]<bgcolor=cRed>; //Glyph cache?
    FSeek(Header.battleCardDataOff);
    BattleCardData BattleCardStruct<bgcolor=cPurple>;
    byte UnknownData5[Header.unkDataOff3[1]-Header.unkDataOff3[0]]<bgcolor=cDkRed>;
    byte UnknownData6[Header.enemyDataOff-Header.unkDataOff3[1]]<bgcolor=cDkRed>;
    FSeek(Header.enemyDataOff);
    EnemyData EnemyDataStruct<bgcolor=cLtPurple>;
    byte UnknownData7[Header.unkDataOff4[1]-Header.unkDataOff4[0]]<bgcolor=cDkRed>;
    byte UnknownData8[Header.unkDataOff4[2]-Header.unkDataOff4[1]]<bgcolor=cDkRed>;
    byte UnknownData9[Header.unkDataOff4[3]-Header.unkDataOff4[2]]<bgcolor=cDkRed>;
    byte UnknownData10[Header.unkDataOff4[3]-Header.unkDataOff4[2]]<bgcolor=cDkRed>;
} ML5Engine_Database;