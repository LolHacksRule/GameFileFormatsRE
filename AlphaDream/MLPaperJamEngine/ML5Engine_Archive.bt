//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "../../LHR/Common.bt"

typedef struct FileMeta
{
    uint32 offset<bgcolor=cRed>;
    local uint32 trueOffset = (offset & 0x7fffffff);
    uint32 size<bgcolor=cPurple>;
    local uint32 trueSize = (size & 0x7fffffff);
    uint32 fileNameCRC<bgcolor=cBlue>;
    short fileNameOff<bgcolor=cGreen>;
    FPos = FTell();
    FSeek(stringTablePos+fileNameOff);
    string fileName<bgcolor=cGreen>;
    Printf("%X\t|%s|%i|%X|\n", offset, fileName, trueSize, fileNameCRC);
    /*FSeek(Header.dataOffset+trueOffset);
    if (trueSize > 0)
    {
        byte fileData[trueSize]<bgcolor=cRed>;
    }*/
    FSeek(FPos);
};

struct ML5Engine_Archive
{
    LittleEndian();
    struct
    {
        uint32 magic<bgcolor=cYellow>;
        if (magic == 288638786) //BG4 with 11 byte
        {
            Printf("Please decompress this file first. (BLZ)");
            break;
        }
        int16 ver<bgcolor=cLtPurple>;
        int16 files<bgcolor=cPurple>;
        int32 dataOffset<bgcolor=cRed>;
        int16 fileEntriesDerived<bgcolor=cRed>;
        int16 fileEntriesMult<bgcolor=cRed>;
    } Header;
    local uint32 stringTablePos = 16+(Header.files*14);
    FileMeta FileMetaEntry[Header.files]<optimize=false>;
    for (i = 0; i < Header.files; i++)
    {
        FSeek(Header.dataOffset); //Todo: check
        if (FileMetaEntry[i].trueSize != 0)
        {
            FSeek(FileMetaEntry[i].trueOffset); //Todo: check
            struct
            {
                local string fileDataFileName = FileMetaEntry[i].fileName;
                byte data[FileMetaEntry[i].size]<bgcolor=cLtGreen>;
            } FileDataEntry;
        }
    }
} BG4;