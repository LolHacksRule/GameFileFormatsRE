//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: NW Bezel Engine BFTRG
//   Authors: LHR
//   Version: 
//   Purpose: Deserializing
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef enum <uint16> {
	IsLE = 0xFEFF,
    IsBE = 0xFFFE,
} endianEnum;

//typedef byte            int8;
//typedef unsigned byte   uint8;

LittleEndian();

struct BezelEngineFXTriggerBin
{
    struct FileHdr
    {
        char FTRGHdr[4];
        endianEnum bezEndianEnum;
        //if (bezEndianEnum == IsLE)
        //{
            //LittleEndian();
        //}
        uint16 hdrSize; //20
        //
        byte microVer;
        byte minorVer;
        byte majorVer;
        byte minorAndMicroSize;
        //Printf("Bezel Engine caFe TRiGger version: 1." + majorVer + ".0.0");
        uint32 fileSize;
        uint16 dBlks;
        uint16 dBytes;
        //unkEnum theEnum;
        struct BlockRefTbl
        {
            uint16 typeId;
            char efStrDummy[2];
            int32 offst;
            uint32 dataBlockSize;
        } blkRefTbl;
    } hdr<bgcolor = cBlue>;
    struct DataBlock
    {
        struct DBlkHdr
        {
            char theWordData[4];
            uint32 dblksize;
        } dblkHdr;
        struct DBlkBody
        {
            uint16 dblkTypeId; //0001 / 256
            ubyte pad[2]; 
            int32 offst; //08000000 / 8, Offst of DBlk body from DATA?
        } dblkBody;
    } dblk<bgcolor = cGreen>;
    struct ActorRefInfoTbl
    {
        uint32 cnt; //01000000
        struct ToActorRefInfo
        {
            uint16 typeId; //0091 / 37120
            char  pad[2];
            int32 offst; //08000000 / 8
        } toActorRefInfo;//[18];
    } actorRefInfoTbl;
    struct ActorRefInfo
    {
        struct ToStringActorName
        {
            uint16 typeId; //00001f01 / 37120
            char   pad[2];
            int32  offst; //08000000 / 8
        } toStringActorName;
        struct ToFxTrigRefInfoTbl
        {
            uint16 typeId; //00001f01 / 37120
            char   pad[2];
            int32  offst; //08000000 / 8
        } toFXTrigRefInfoTbl;
    } actorRefInfo;
    //string ActorName;
    struct FxTrigRefInfoTbl
    {
        uint32 cnt; //01000000
        struct ToFXTrigItem
        {
            uint16 typeId; //00001f01 / 37120
            char   pad[2];
            int32  offst; //08000000 / 8
        } toFXTrigItm;
    } FXTrigRefInfoTbl;
    struct FXTrigRefInfo
    {
        float posOff;
        //hdr.blkRefTbl toStringTrigKey;
        byte toStringTrigKey;
        //hdr.blkRefTbl toStringAssetFilePath;
        //hdr.blkRefTbl toStringBoneName;
        byte toStringAssetFilePath;
        byte toStringBoneName;
    } fxTrigRefInfo;
} BezEngFRTGBin;