//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

//https://github.com/kinnay/Nintendo-File-Formats/wiki/BAGST-File-Format

#include "AALCommon.bt"

typedef struct CommonBlockHdr
{
    char   blockType[4];
	uint32 blockHdrSize;
    if (blockHdrSize == 0)
    {
        Printf("Data ended abruptly");
        break;
    }
} commonBlockHdr;

typedef struct TreeNode
{
    uint32 nodeSize;
    uint32 groupIndex;
    uint32 childrenNum;
    if (childrenNum)
    {
        struct TreeNode childTree[childrenNum]<optimize=false>;
    }
};

typedef struct {
    commonBlockHdr TreeBlockHDR;
    uint32 offToDefGroup;
    TreeNode RootNode;
    //byte block[TreeBlockHDR.blockHdrSize];
} TREEBlock;

typedef struct
{
    float vol;
    float pitch;
    float lfe;
    float lpf;
    uint32 biquadFilterType;
    float biquadFilterVal;
    uint32 angleIdx;
    float spread;
    float deviceVol;
    float unk[5];
    float busVol[4];
} DefaultSoundParam;

typedef enum <uint32>
{
    PrioEarlier = 1,
    PrioLater,
    Earlier,
    Later,
} ActiveSoundLimiterType;

typedef struct
{
    uint32 unk[2];
} ActiveSoundLimiterSettings;

typedef struct
{
    uint32 unk[5];
} RequestSoundLimiterSettings;

typedef struct
{
    float unk;
} RequestIntervalLimiterSettings;

typedef struct
{
    ActiveSoundLimiterType activeLimiterType;
    ActiveSoundLimiterSettings ActiveSoundLimiterSettingsEntry;
    uint32 requestSoundLimiterType;
    RequestSoundLimiterSettings RequestSoundLimiterSettingsEntry;
    uint32 requestIntervalLimiterType;
    RequestIntervalLimiterSettings RequestIntervalLimiterSettingsEntry;
} GroupLimiterParam;

typedef struct
{
    uint32 unk[3];
} GroupDuckerSettings;

typedef struct
{
    uint32 strTblOff;
    uint32 unk[4];
} DuckingTargetSettings;

typedef struct
{
    GroupDuckerSettings GroupDuckerSettingsEntry;
    float volumeFloor;
    uint32 unk;
    uint32 targets;
    if (targets)
    {
        DuckingTargetSettings DuckingTargetSettingsEntry[targets];
    }
} DuckingParam;

typedef struct
{
    uint32 nameOff;
    FPos = FTell();
    FSeek(Header.strgOff+8+nameOff);
    string name;
    FSeek(FPos);
    uint32 unk[3];
    DefaultSoundParam DefaultSoundParamEntry;
    GroupLimiterParam DefaultGroupLimiterParamEntry;
    uint32 unk2;
    DuckingParam DuckingParamEntry;
} GroupParam;

typedef struct {
    commonBlockHdr GroupBlockHDR;
    if (Header.binhdr.ver < 9)
    {
        uint32 groups;
        uint32 groupOffset[groups];
        struct GroupParamEntries
        {
            for (i = 0; i < groups; i++)
            {
                GroupParam GroupParamEntry;
            }
        } gpe;
        //byte block[GroupBlockHDR.blockHdrSize];
    }
    else
    {
        byte block[GroupBlockHDR.blockHdrSize];
    }
} GRPBlock;

typedef struct {
    commonBlockHdr MANDBlockHDR; //Audio ducker config?
    byte BYMLData[MANDBlockHDR.blockHdrSize];
} MANDBlock;

typedef struct {
    commonBlockHdr PauseSettingsBlockHDR;
    byte BYMLData[PauseSettingsBlockHDR.blockHdrSize];
} PASEBlock;

typedef struct {
    commonBlockHdr GCCDBlockHDR;
    byte BYMLData[GCCDBlockHDR.blockHdrSize];
} GCCDBlock;

typedef struct {
    commonBlockHdr BFILBlockHDR;
    byte BYMLData[BFILBlockHDR.blockHdrSize];
} BFILBlock;

typedef struct {
    commonBlockHdr STRGBlockHDR;
    struct StringTableEntries
    {
        while (FPos != EOF) //For now
        {
            struct StringTableEntry
            {
                string stringEntry;
                //Printf("%s\n", stringEntry);
            } ste;
            FPos = FTell();
        }
    } stes;
    //byte block[STRGBlockHDR.blockHdrSize];
} STRGBlock;

typedef struct {
    N_EAD_AAL_CommonBinHeader binhdr;
    uint32 fSize;
    uint32 treeOff;
    uint32 grpOff;
    if (binhdr.ver >= 9) //Thunder/Sports3
    {
        uint32 mandOff;
        uint32 paseOff;
        uint32 gccdOff;
        if (binhdr.ver >= 10) //Thunder/Sports3
        {
            uint32 bfilOff; //Binary File off?
        }
    }
    uint32 strgOff;
} AGSTHdr;

struct BinaryAudioGroupSettings
{
    AGSTHdr Header;
    TREEBlock TreeBlock;
    GRPBlock GroupBlock;
    if (Header.binhdr.ver >= 9) //Thunder/Sports3
    {
        MANDBlock MandBlock;
        PASEBlock PaseBlock;
        GCCDBlock GccdBlock;
        if (Header.binhdr.ver == 10) //Secred
        {
            BFILBlock BinaryFileBlock;
        }
    }
    STRGBlock StringBlock<optimize=false>;
} BAGST;