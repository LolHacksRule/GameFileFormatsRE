//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

local string stringTblIdxToTempString <hidden=true> = "";
local uint32 internalFiles <hidden=true> = 0;

#include "../../../CommonBin.bt"

//NW: Revolution
//NW2011: CTR + Cafe + NX

typedef enum <uint16>
{
    NW_BlockTypeID_WaveIDTable = 256,
    NW_BlockTypeID_InsRefTable = 257,
    NW_BlockTypeID_Instrument = 22784,
    NW_BlockTypeID_KeyRegion,
} NW_BlockTypeID;

typedef enum <uint16>
{
    NW2011_BlockTypeID_WaveArchiveTable = 256,
    NW2011_BlockTypeID_TrackInfoTable,
    NW2011_BlockTypeID_ChannelnfoTable = 768,
    NW2011_BlockTypeID_FileBlockEntry = 7936,
    NW2011_BlockTypeID_StringEntry,
    NW2011_BlockTypeID_StringBlock = 8192,
    NW2011_BlockTypeID_InfoBlock,
    NW2011_BlockTypeID_FileBlock,
    NW2011_BlockTypeID_SoundInfoReferenceTable = 8448,
    NW2011_BlockTypeID_BankInfoReferenceTable,
    NW2011_BlockTypeID_PlayerInfoReferenceTable,
    NW2011_BlockTypeID_WaveArchiveInfoReferenceTable,
    NW2011_BlockTypeID_SoundGroupInfoReferenceTable,
    NW2011_BlockTypeID_GroupInfoReferenceTable,
    NW2011_BlockTypeID_FileInfoReferenceTable,
    NW2011_BlockTypeID_SoundInfo = 8704,
    NW2011_BlockTypeID_StreamSoundInfo,
    NW2011_BlockTypeID_WaveSoundInfo,
    NW2011_BlockTypeID_SequenceSoundInfo,
    NW2011_BlockTypeID_SoundGroupInfo = 8708,
    NW2011_BlockTypeID_WaveArchiveTableRef,
    NW2011_BlockTypeID_WaveArchiveInfo = 2207,
    NW2011_BlockTypeID_BankInfo = 8710,
    NW2011_BlockTypeID_SoundArchivePlayerInfoRef,
    NW2011_BlockTypeID_GroupInfo,
    NW2011_BlockTypeID_PlayerInfo,
    NW2011_BlockTypeID_FileInfo,
    NW2011_BlockTypeID_SoundArchivePlayerInfo = 8715,
    NW2011_BlockTypeID_InternalFileInfo,
    NW2011_BlockTypeID_ExternalFileInfo,
    NW2011_BlockTypeID_TrackInfo,
    NW2011_BlockTypeID_TrackChannelInfo = 8719,
    NW2011_BlockTypeID_StringTable = 9216,
    NW2011_BlockTypeID_SearchTree,
    NW2011_BlockTypeID_CStreamInfo = 16384, //BCSTM
    NW2011_BlockTypeID_StreamSeek, //BCSTM
    NW2011_BlockTypeID_StreamData, //BCSTM
    NW2011_BlockTypeID_StreamInfo = 16640,
    NW2011_BlockTypeID_TrackInfoRef,
    NW2011_BlockTypeID_ChannelInfo,
    NW2011_BlockTypeID_Information = 22528,
    NW2011_BlockTypeID_FWaveArchiveInfo = 26624,
    NW2011_BlockTypeID_FWaveArchiveFile,
    NW2011_BlockTypeID_Instrument = 22784,
    NW2011_BlockTypeID_KeyRegion,
    NW2011_BlockTypeID_VelocityRegion = 22786,
    NW2011_BlockTypeID_Null,
    NW2011_BlockTypeID_Direct = 24576,
    NW2011_BlockTypeID_Range,
    NW2011_BlockTypeID_Index,
} NW2011_BlockTypeID;

typedef enum <byte>
{
    NW_ReferenceType_Address,
    NW_ReferenceType_Offset,
} NW_ReferenceType;

typedef enum <byte>
{
    NW_SoundType_Sequence = 1,
    NW_SoundType_Stream,
    NW_SoundType_Wave,
} NW_SoundType;

typedef enum <byte>
{
    NW2011_AttenuationCurve_Linear = 1,
    NW2011_AttenuationCurve_Logarithmic,
} NW2011_AttenuationCurve;

typedef enum <byte>
{
    NW2011_FileType_Sound = 1,
    NW2011_FileType_SoundGroup,
    NW2011_FileType_Bank,
    NW2011_FileType_Player,
    NW2011_FileType_WaveArchive,
    NW2011_FileType_Group,
} NW2011_FileType;

typedef struct NW2011_ItemID_BE
{
    NW2011_FileType fileType;
    int32 fidx: 24;
    FSkip(-1);
};

typedef struct NW2011_ItemID
{
    int32 fidx: 24;
    FSkip(-1);
    NW2011_FileType fileType;
};

typedef enum <byte>
{
    NW_PanMode_Dual,
    NW_PanMode_Balance,
} NW_PanMode;

typedef enum <uint16>
{
    NW2011_PanMode_Dual,
    NW2011_PanMode_Balance,
} NW2011_PanMode;

typedef enum <byte>
{
    NW_PanCurve_Sqrt,
    NW_PanCurve_Sqrt0DB,
    NW_PanCurve_Sqrt0DBClamp,
    NW_PanCurve_SinCOS,
    NW_PanCurve_SinCOS0DB,
    NW_PanCurve_SinCOS0DBClamp,
    NW_PanCurve_LinearCOS,
    NW_PanCurve_LinearCOS0DB,
    NW_PanCurve_LinearCOS0DBClamp,
} NW_PanCurve;

typedef enum <uint16>
{
    NW2011_PanCurve_Sqrt,
    NW2011_PanCurve_Sqrt0DB,
    NW2011_PanCurve_Sqrt0DBClamp,
    NW2011_PanCurve_SinCOS,
    NW2011_PanCurve_SinCOS0DB,
    NW2011_PanCurve_SinCOS0DBClamp,
    NW2011_PanCurve_LinearCOS,
    NW2011_PanCurve_LinearCOS0DB,
    NW2011_PanCurve_LinearCOS0DBClamp,
} NW2011_PanCurve;

typedef struct NW_BlockDefinition
{
    uint32 off;
    uint32 size;
};

typedef struct NW2011_BlockDefinition
{
    NW2011_BlockTypeID typeID;
    uint16 pad; //Should we really have to do this
    uint32 off;
    uint32 size;
};

typedef struct NW_DataReference
{
    NW_ReferenceType referenceType; //1 is offset
    byte dataType; //0 is raw
    uint16 rsrv;
    uint32 value; //Usually offset
};

typedef struct NW2011_BlockDefinitionWithoutSize
{
    NW2011_BlockTypeID typeID;
    uint16 pad;
    int32 off;
};

typedef struct NW2011_InfoReferenceTable
{
    uint32 entries;
    if (entries)
        NW2011_BlockDefinitionWithoutSize ref[entries];
};

typedef struct NW_SubChunk
{
    char       signature[4];
    uint32     blockSize;
};

typedef struct NW_Label //Only used in sequences but also used from BRWSD export through BrawlCrate so it's here
{
    NW_SubChunk LABLChunk;
    FPos = FTell();
    uint32 labels;
    uint32 labelOff[labels];
    struct
    {
        FSeek(FPos+labelOff[i]);
        i++;
        uint32 off;
        uint32 strLen;
        string name;
    } LabelDefine[labels]<optimize=false>;
    while (FTell() != EOF && ReadByte() == 0x0) //errors unless you flag to EOF idk why
        FSkip(1);
};

typedef struct NW2011_SubChunk
{
    char       signature[4];
    uint32     offsetToNextBlock;
    uint32     blockSize;
    uint32     reserved;
};

typedef struct NW_FileDataTable
{
    NW_SubChunk FILE;
    FPos = FTell();
    byte pad[24];
    if ((BlockHeader.signature == "FSAR" || BlockHeader.signature == "FGRP") && ReadUInt() == 0) //Do we detect this by endian?
        byte cafePad[32];
    if (BlockHeader.signature == "FSAR" || BlockHeader.signature == "CSAR" || BlockHeader.signature == "FWAR" || BlockHeader.signature == "FGRP") //Cleanly read the file
    {
        i = 0;
        //FSeek(FPos+INFO.FileInfo.FileInfoTable.InternalFileInfo[i].fileBlockRef.off);
        struct //Like this!
        {
            FSeek(FPos+INFO.FileInfo.FileInfoTable.InternalFileInfo[i].fileBlockRef.off); //This breaks in MK8 but the file is read perfectly
            byte chunk[INFO.FileInfo.FileInfoTable.InternalFileInfo[i].fsz];
            i++;
            if (i != internalFiles) //Temp fix to EOF error
            {
                while (ReadByte() == 0x0)
                    FSkip(1);
            }
        } NW2011InternalFile[internalFiles]<optimize=false>;
    }
    else if (BlockHeader.signature == "RWAR") //Cleanly read the waves
    {
        i = 0;
        struct //Like this!
        {
            FSeek(sizeof TABL+32+TABL.Entry[i].refType.value);
            byte RWAV[TABL.Entry[i].size];
            i++;
            if (i != internalFiles) //Temp fix to EOF error
            {
                while (ReadByte() == 0x0)
                    FSkip(1);
            }
        } WARFile[TABL.entries]<optimize=false>;
    }
    else if (BlockHeader.signature == "RSAR")
    {
        while (FPos < EOF) //Lazily read the chunks until EOF, I'll probably come up with something better at some point
        {
            struct
            {
                FSkip(8);
                uint32 sz;
                FSkip(-12);
                byte chunk[sz];
                if (BlockHeader.ver == 7) //In v7, chunks are padded, breaks on chunks starting with non RVL magic like raw DSP audio, in v7 and BBA
                {
                    while (ReadByte() == 0x0)
                        FSkip(1);
                }
            } BRSARInternalFile;
            FPos = FTell();
        }
    }
    else
        byte EmbeddedFileData[FILE.blockSize-32]; //For now
};

typedef struct NW2011_SearchTreeNode
{
    U16_Bool isLeaf;
    int16 strBitIdx;
    int32 childIdx[2];
    int32 strTblIdx;
    if (strTblIdx != 4294967295 && strTblIdx <= STRG.stringEntries-1)
    {
        stringTblIdxToTempString = STRG.StringEntries.StringEntry[strTblIdx].stringEntry;
        local string tempStrToDisp = stringTblIdxToTempString;
    }
    if (BlockHeader.byteOrderMark == U16_Big) //Here's a fix
        NW2011_ItemID_BE itemId;
    else
        NW2011_ItemID itemId;
};

typedef struct NW2011_StringSection
{
    FPos = FTell();
    NW_SubChunk STRGChunk;
    NW2011_BlockDefinitionWithoutSize stringTblRef;
    NW2011_BlockDefinitionWithoutSize searchTreeRef;
    uint32 stringEntries;
    NW2011_BlockDefinition StringEntryDef[stringEntries];
    struct
    {
        for (i = 0; i < stringEntries; i++)
        {
            struct
            {
                char stringEntry[StringEntryDef[i].size];
            } StringEntry;
        }
    } StringEntries;
    FSeek(FPos+searchTreeRef.off+8);
    struct
    {
        //NW2011_BlockDefinitionWithoutSize wiiu;
        uint32 rootIdx;
        uint32 nodes;
        NW2011_SearchTreeNode SearchTreeNode[nodes]<optimize=false>;
    } StringSearchTree;
    FSeek(BlockHeader.block[1].off);
};

typedef struct NW2011_Sound3DInfo
{
    uint32 flags;
    float attenuationRate;
    NW2011_AttenuationCurve attenuationCurve;
    byte doppler;
    uint16 pad;
    uint32 exFlags;
};

typedef struct NW2011_TrackChannelInfo
{
    uint32 entries;
    byte channelIdx[entries];
    while (ReadByte() == 0x0)
        FSkip(1);
    byte sendMain;  
    byte sendA;
    byte sendB;
    byte sendC;
    byte pad[4]; //?
};

typedef struct NW2011_TrackInfo
{
    ubyte volume;
    byte pan;
    byte surroundPan;
    Byte_Bool isSurround;
    NW2011_BlockDefinitionWithoutSize warRef;
    NW2011_BlockDefinitionWithoutSize trackChannelInfoRefReference;
    byte lpfFreq;
    byte biquadType;
    byte biquadVal;
    byte pad;
    NW2011_TrackChannelInfo thisRef;
};

typedef struct NW2011_StreamSoundInfo
{
    uint16 flags;
    uint16 channels;
    NW2011_BlockDefinitionWithoutSize trackInfoTableRef;
    float pitch;
    NW2011_BlockDefinitionWithoutSize trackChannelInfoRef;
    NW2011_BlockDefinitionWithoutSize soundExtRef;
    int32 prefetchID;
    NW2011_InfoReferenceTable trackInfoTbl;
    NW2011_TrackInfo ti[trackInfoTbl.entries]<optimize=false>;
    byte sendMain;  
    byte sendA;
    byte sendB;
    byte sendC;
    byte pad[4];
    if (soundExtRef.typeID)
    {
        struct
        {
            uint32 typeInfo;
            uint32 loopStartFrm;
            uint32 loopEndFrm;
        } StreamSoundConfig;
    }
};

typedef struct NW2011_WaveSoundInfo
{
    uint32 waveIdx;
    uint32 unk;
    uint32 flags;
    if (flags && 0x01)
    {
        uint16 relPrioFix;
        uint16 channelPriority;
    }
};

typedef struct NW2011_WaveArchiveTable
{
    uint32 entries;
    if (entries)
    {
        if (BlockHeader.byteOrderMark == U16_Big) //Here's a fix
            NW2011_ItemID_BE waveArchiveItemID[entries]<optimize=false>;
        else
            NW2011_ItemID waveArchiveItemID[entries]<optimize=false>;
    }
};

typedef struct NW2011_SequenceSoundInfo
{
    NW2011_BlockDefinitionWithoutSize bankIdTblRef;
    uint32 validityBitMask;
    uint32 flags;
    if (flags && 0x01)
        uint32 startOff;
    if (flags && 0x02)
    {
        uint16 relPrioFix;
        uint16 channelPriority;
    }
    NW2011_WaveArchiveTable wat;
};

typedef struct NW2011_SoundFileInfo
{
    FPos = FTell();
    uint32 strTblIdx;
    if (strTblIdx != 4294967295 && strTblIdx <= STRG.stringEntries-1)
    {
        stringTblIdxToTempString = STRG.StringEntries.StringEntry[strTblIdx].stringEntry;
        local string tempStrToDisp = stringTblIdxToTempString;
    }
    if (BlockHeader.byteOrderMark == U16_Big) //Here's a fix
        NW2011_ItemID_BE playerItemId;
    else
        NW2011_ItemID playerItemId;
    byte volume;
    byte remoteFilter;
    byte pad[2];
    NW2011_BlockDefinitionWithoutSize ref;
    uint32 flags;
    if (flags & 0x1)
    {
        uint32 strTblIdx;
        if (strTblIdx != 4294967295 && strTblIdx <= STRG.stringEntries-1)
        {
            stringTblIdxToTempString = STRG.StringEntries.StringEntry[strTblIdx].stringEntry;
            local string tempStrToDisp2 = stringTblIdxToTempString;
        }
    }
    if (flags & 0x2)
    {
        NW2011_PanCurve panCurve;
        NW2011_PanMode panMode;
    }
    if (flags & 0x4)
    {
        if (BlockHeader.byteOrderMark == U16_Little) //Lol
        {
            uint16 playerPriority_LE;
            uint16 actorPlayerID_LE;
        }
        else
        {
            uint16 actorPlayerID;
            uint16 playerPriority;
        }
    }
    if (flags & 0x100) //Enable Sound 3D Info
        uint32 threeDInfoOff;
    if (flags & 0x20000) //Enable Front Bypass
        U32_Bool frontByp;
    if (flags & 0x10000000)
        uint32 userParam1;
    if (flags & 0x20000000)
        uint32 userParam2;
    if (flags & 0x40000000)
        uint32 userParam3;
    if (flags & 0x80000000)
        uint32 userParam4;
    if (flags & 0x100)
    {
        FSeek(FPos+threeDInfoOff);
        NW2011_Sound3DInfo sthreedi;
    }
    FSeek(FPos+ref.off);
    switch (ref.typeID)
    {
        case NW2011_BlockTypeID_StreamSoundInfo: NW2011_StreamSoundInfo ssi; break;
        case NW2011_BlockTypeID_WaveSoundInfo: NW2011_WaveSoundInfo wsi; break;
        case NW2011_BlockTypeID_SequenceSoundInfo: NW2011_SequenceSoundInfo seqsi; break;
    }
};

typedef struct NW2011_SoundInfo
{
    NW2011_InfoReferenceTable soundInfoRefTbl;
    Printf("Sound Info Table is WIP!\n");
    NW2011_SoundFileInfo SoundFileInfo[soundInfoRefTbl.entries]<optimize=false>;
};

typedef struct NW2011_FileTable
{
    uint32 entries;
    if (entries != 0)
        uint32 off[entries];
};

typedef struct NW2011_WaveArchiveInfo
{
    NW2011_InfoReferenceTable waveArchiveInfoRefTbl;
    struct
    {
        uint32 strTblIdx;
        if (strTblIdx != 4294967295 && strTblIdx <= STRG.stringEntries-1)
        {
            stringTblIdxToTempString = STRG.StringEntries.StringEntry[strTblIdx].stringEntry;
            local string tempStrToDisp = stringTblIdxToTempString;
        }
        byte unk;
        byte pad[3];
        uint32 flags;
        if (flags & 0x1)
        {
            uint32 strTblIdx;
            if (strTblIdx != 4294967295 && strTblIdx <= STRG.stringEntries-1)
            {
                stringTblIdxToTempString = STRG.StringEntries.StringEntry[strTblIdx].stringEntry;
                local string tempStrToDisp2 = stringTblIdxToTempString;
            }
        }
        if (flags & 0x2)
            uint32 waves;
    } WaveArchiveInfoEntry[waveArchiveInfoRefTbl.entries]<optimize=false>;
};

typedef struct NW2011_SoundGroupInfo
{
    NW2011_InfoReferenceTable soundGroupInfoRefTbl;
    struct
    {
        if (BlockHeader.byteOrderMark == U16_Big) //Here's a fix
        {
            NW2011_ItemID_BE firstSound;
            NW2011_ItemID_BE lastSound;
        }
        else
        {
            NW2011_ItemID firstSound;
            NW2011_ItemID lastSound;
        }
        NW2011_BlockDefinitionWithoutSize fileTableRef;
        NW2011_BlockDefinitionWithoutSize waveArchiveTableRefReference;
        uint32 flags;
        if (flags & 0x1)
        {
            uint32 strTblIdx;
            if (strTblIdx != 4294967295 && strTblIdx <= STRG.stringEntries-1)
            {
                stringTblIdxToTempString = STRG.StringEntries.StringEntry[strTblIdx].stringEntry;
                local string tempStrToDisp = stringTblIdxToTempString;
            }
        }
        NW2011_FileTable ft;
        //uint32 pad;
        if (waveArchiveTableRefReference.off != -1) //temp solution
        {
            NW2011_BlockDefinitionWithoutSize waveArchiveTableReference;
            FSkip(waveArchiveTableReference.off-8);
            NW2011_WaveArchiveTable waveArchiveTable;
        }
    } SoundGroupInfoTable[soundGroupInfoRefTbl.entries]<optimize=false>;
};

typedef struct NW2011_BankInfo
{
    NW2011_InfoReferenceTable bankInfoRefTbl;
    if (bankInfoRefTbl.entries != 0)
    {
        //Printf("Bank Info is UNSUPPORTED!\n");
        struct
        {
            uint32 strTblIdx;
            if (strTblIdx != 4294967295 && strTblIdx <= STRG.stringEntries-1)
            {
                stringTblIdxToTempString = STRG.StringEntries.StringEntry[strTblIdx].stringEntry;
                local string tempStrToDisp = stringTblIdxToTempString;
            }
            NW2011_BlockDefinitionWithoutSize waveArchiveTableReference;
            uint32 flags;
            if (flags & 0x1)
            {
                uint32 strTblIdx;
                if (strTblIdx != 4294967295 && strTblIdx <= STRG.stringEntries-1)
                {
                    stringTblIdxToTempString = STRG.StringEntries.StringEntry[strTblIdx].stringEntry;
                    local string tempStrToDisp2 = stringTblIdxToTempString;
                }
            }
            FSkip(4); //¯\_(ツ)_/¯ temp fix may break [todo on CTR is this needed]
        } BankInfoTable[bankInfoRefTbl.entries]<optimize=false>;
    }
};

typedef struct NW2011_GroupInfo
{
    NW2011_InfoReferenceTable groupInfoRefTbl;
    struct
    {
        uint32 strTblIdx;
        if (strTblIdx != 4294967295 && strTblIdx <= STRG.stringEntries-1)
        {
            stringTblIdxToTempString = STRG.StringEntries.StringEntry[strTblIdx].stringEntry;
            local string tempStrToDisp = stringTblIdxToTempString;
        }
        uint32 flags;
        if (flags & 0x1)
        {
            uint32 strTblIdx;
            if (strTblIdx != 4294967295 && strTblIdx <= STRG.stringEntries-1)
            {
                stringTblIdxToTempString = STRG.StringEntries.StringEntry[strTblIdx].stringEntry;
                local string tempStrToDisp2 = stringTblIdxToTempString;
            }
        }
    } GroupInfoTable[groupInfoRefTbl.entries]<optimize=false>;
};

typedef struct NW2011_PlayerInfo
{
    NW2011_InfoReferenceTable playerInfoRefTbl;
    struct
    {
        uint32 playableSoundLimit;
        uint32 flags;
        if (flags & 0x1)
        {
            uint32 strTblIdx;
            if (strTblIdx != 4294967295 && strTblIdx <= STRG.stringEntries-1)
            {
                stringTblIdxToTempString = STRG.StringEntries.StringEntry[strTblIdx].stringEntry;
                local string tempStrToDisp = stringTblIdxToTempString;
            }
        }
        if (flags & 0x2)
            uint32 playerHeapSz;
    } NW2011_PlayerInfoTable[playerInfoRefTbl.entries]<optimize=false>;
};

//local uint terminateFileInfoDetect <hidden=true> = 0; //Don't remember what I used this for but keeping

typedef struct NW2011_FileInfo
{
    NW2011_InfoReferenceTable fileInfoRefTbl;
    struct
    {
        for (i = 0; i < fileInfoRefTbl.entries; i++)
        {
            NW2011_BlockDefinitionWithoutSize fileInfoRef<hidden=true>;
            FSkip(-8);
            if (fileInfoRef.typeID == NW2011_BlockTypeID_InternalFileInfo)
            {
                internalFiles++;
                struct
                {
                    NW2011_BlockDefinitionWithoutSize internalFileInfoRef;
                    FSkip(4);
                    NW2011_BlockDefinitionWithoutSize fileBlockRef;
                    uint32 fsz;
                    NW2011_BlockDefinitionWithoutSize internalWaveArchiveTableRef;
                    NW2011_WaveArchiveTable iwat;
                } InternalFileInfo;
            }
            else
            {
                struct
                {
                    NW2011_BlockDefinitionWithoutSize externalFileInfoRef;
                    FSkip(4);
                    string externalFName;
                    while (ReadByte() == 0x0 && i != fileInfoRefTbl.entries)
                        FSkip(1);
                } ExternalFileInfo;
            }
        }
    } FileInfoTable;
};

typedef struct NW2011_SoundArchivePlayerInfo
{
    uint16 sequenceSounds;
    uint16 sequenceTracks;
    uint16 streamSounds;
    uint16 streamTracks;
    uint16 streamChannels;
    uint16 waveSounds;
    uint16 waveTracks;
    LittleEndian(); //Lol
    uint16 streamBufferTimes;
    if (BlockHeader.byteOrderMark == U16_Big) //Here's a fix
        BigEndian();
    uint16 unk;
};

typedef struct NW2011_InfoSection //Needs help on 3DS
{
    NW_SubChunk INFOChunk;
    FPos = FTell();    
    struct
    {
        NW2011_BlockDefinitionWithoutSize soundInfoRefTableRef;
        NW2011_BlockDefinitionWithoutSize soundGroupInfoRefTableRef;
        NW2011_BlockDefinitionWithoutSize bankInfoRefTableRef;
        NW2011_BlockDefinitionWithoutSize waveArchiveInfoRefTableRef;
        NW2011_BlockDefinitionWithoutSize groupInfoRefTableRef;
        NW2011_BlockDefinitionWithoutSize playerInfoRefTableRef;
        NW2011_BlockDefinitionWithoutSize fileInfoRefTableRef;
        NW2011_BlockDefinitionWithoutSize soundArchivePlayerInfoRef;
    } References;
    NW2011_SoundInfo SoundInfo; //Broken on CTR
    //FSeek(FPos+References.soundGroupInfoRefTableRef.off);
    NW2011_SoundGroupInfo SoundGroupInfo;
    //FSeek(FPos+References.bankInfoRefTableRef.off);
    NW2011_BankInfo BankInfo; //Broken on CTR
    //FSeek(FPos+References.waveArchiveInfoRefTableRef.off);
    NW2011_WaveArchiveInfo WaveArchiveInfo;
    //FSeek(FPos+References.groupInfoRefTableRef.off);
    NW2011_GroupInfo GroupInfo;
    //FSeek(FPos+References.playerInfoRefTableRef.off);
    NW2011_PlayerInfo PlayerInfo;
    //FSeek(FPos+References.fileInfoRefTableRef.off);
    NW2011_FileInfo FileInfo; //Kinda broken on CTR
    //FSeek(FPos+References.soundArchivePlayerInfoRef.off);
    NW2011_SoundArchivePlayerInfo SoundArchivePlayerInfo;
    while (ReadByte() == 0x0)
        FSkip(1);
};

typedef struct NW_CommonBinHeader
{
    char             signature[4];
    LittleEndian(); //Do this so the BOM in the header output is correct
    U16_EndianEnum   byteOrderMark;
    if (byteOrderMark == U16_Big)
        BigEndian();
    if (signature == "RSAR" || signature == "RWAR" || signature == "RWSD" || signature == "RBNK" || signature == "RSEQ" || signature == "SDAT" || signature == "SSEQ" || signature == "RASD") 
    {
        uint16 ver;
        uint32 fileSize;
    }
    uint16           headerSize;
    if (signature != "RSAR" && signature != "RWAR" && signature != "RWSD" && signature != "RBNK" && signature != "RSEQ" && signature != "SDAT" && signature != "SSEQ" && signature != "RASD")
    {
        if (byteOrderMark == U16_Big || signature == "CSAR" || signature == "CBNK" || signature == "CWSD")
            N_BinVersion_Big version;
        else
            N_BinVersion version;
        Printf("Version: %i.%i.%i\n", version.major, version.minor, version.micro);
        uint32           fileSize;
        if (byteOrderMark == U16_Big) //Fix Wii U
        {
            uint16 blocks;
            uint16 pad2;
        }
        else
            uint32           blocks;
        NW2011_BlockDefinition block[blocks]<optimize=false>;
    }
    else
    {
        uint16 blocks;
        if (headerSize > 16)
            NW_BlockDefinition block[blocks]<optimize=false>;
    }
    while (ReadByte() == 0x0)
        FSkip(1);
};
