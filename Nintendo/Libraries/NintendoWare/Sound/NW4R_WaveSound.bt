//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "../NW_CommonBin.bt"

typedef struct DataTable
{
    FPos = FTell();
    NW_SubChunk DataChunk;
    uint32 waveInfoDataEntries;
    NW_DataReference waveInfoDataEntriesRef[waveInfoDataEntries];
    struct
    {
        NW_DataReference waveSoundInfoDataRef;
        NW_DataReference trackTableRef;
        NW_DataReference noteTable;
    } WaveInfoDataTable;
    struct
    {
        float pitch;
        ubyte pan;
        ubyte surroundPan;
        ubyte fxSend[3];
        byte mainSend;
        byte pad[2];
        NW_DataReference graphEnvTableRef;
        NW_DataReference randomizerTableRef;
        uint32 rsrv;
    } WaveSoundInformationData;
    struct
    {
        uint32 trackInfos;
        NW_DataReference trackInfoRef[trackInfos];
        struct
        {
            NW_DataReference noteEventTableRef;
        } TrackInfoEntry[trackInfos]<optimize=false>;
        struct
        {
            uint32 noteEvents;
            NW_DataReference noteEventRef[noteEvents];
            struct
            {
                float pos;
                float len;
                uint32 idx;
                uint32 rsrv;
            } NodeEvent[noteEvents]<optimize=false>;
        } NoteEventTable[trackInfos]<optimize=false>;
    } TrackTable;
    struct
    {
        uint32 noteInfoEntries;
        NW_DataReference nodeIntroEntryRef[noteInfoEntries];
        struct
        {
            int32 waveIdx;
            byte atk;
            byte infoDelay;
            byte sustain;
            byte release;
            byte hold;
            byte pad[3];
            byte originalKey;
            byte vol;
            float infoPan;
            byte infoSurroundPan;
            byte infoPitch;
            NW_DataReference LFOTableRef;
            NW_DataReference graphEnvTableRef;
            NW_DataReference randomizerTableRef;
            uint32 rsrv;
        } NodeInfoEntry[noteInfoEntries]<optimize=false>;
    } NoteTable;
    while (ReadByte() == 0x0)
        FSkip(1);
};

typedef struct WaveTable
{
    NW_SubChunk WaveChunk;
    /*FPos = FTell();
    uint32 waveInfoOffsets;
    uint32 waveInfoOffset[waveInfoOffsets];*/
    Printf("WAVE Chunk is currently UNSUPPORTED!\n");
    byte unknownData[WAVE.blockSize-8];
};

struct NW4R_WaveSound
{
    BigEndian();
    if (ReadUInt() != 1381454660)
    {
        Printf("This is not a NW4R Wave Sound file (BRWSD).\n");
        break;
    }
    NW_CommonBinHeader BlockHeader;
    DataTable DATA;
    if (RWSDHdr.blocks > 1)
    {
        FSeek(FPos+DATAChunk.DATA.blockSize);
        WaveTable WAVE;
    }
} NW4R_WaveSound_BRWSD;