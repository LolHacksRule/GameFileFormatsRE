//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "../NW_CommonBin.bt"

typedef struct DataTable
{
    NW_SubChunk DATA;
    FPos = FTell();
    if (BRBNKHdr.ver == 1)
    {
        Printf("Version 1 bank DATA is currently UNSUPPORTED!\n");
        byte unknownData[DATA.blockSize-8];
    }
    else
    {
        uint32 bankDataEntries;
        struct BankDataEntryRef
        {
            ubyte unk[4]; //0x01010000
            uint32 offToFirstBankDataEntry;
            //ubyte unk2[4]; //0x01010000
            //uint32 offToSecondBankDataEntry;
        } BDER[bankDataEntries];
        struct BankDataEntries
        {
            for (i = 0; i < bankDataEntries; i++)
            {
                struct BankDataEntry
                {
                    uint32 waveNum;
                    byte atk;
                    byte decay;
                    byte sustain;
                    byte release;
                    byte hold;
                    ubyte waveDataLocType;
                    ubyte noteOffType;
                    ubyte altAssign;
                    ubyte origKey;
                    ubyte vol;
                    ubyte pan;
                    ubyte surroundPan;
                    float pitch;
                    byte pad[28];
                    if (ReadInt() > waveNum+1 && ReadInt() != 1463899717)
                    {
                        byte unk[20];
                    }
                } BDE;
            }
        } bdes;
    }
};

typedef struct WaveTable
{
    NW_SubChunk WAVE;
    //if (BRBNKHdr.ver == 1)
    {
        //Printf("Version 1 bank WAVE is currently UNSUPPORTED!\n");
        Printf("WAVE Chunk is currently UNSUPPORTED!\n");
        byte unknownData[WAVE.blockSize-8];
    }
    /*else
    {
        uint32 entries;
        struct Entry
        {
            byte unk[112];
        } entry[entries];
    }*/
};

struct NW4R_Bank
{
    struct BankStruct
    {
        BigEndian();
        NW_CommonBinHdr BRBNKHdr;
        //We'd go to the subchunk offs if v7+ but that's unnecessary
        DataTable DATAChunk;
        if (BRBNKHdr.ver > 1) 
        {
            FSeek(BRBNKHdr.block[1].off);
        }
        WaveTable WAVEChunk;
    } BRBNK_STRUCT;
} RBNK;