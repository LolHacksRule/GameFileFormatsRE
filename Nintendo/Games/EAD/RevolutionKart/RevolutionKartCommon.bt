//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

//https://wiki.tockdom.com/wiki/BMG_(File_Format)/0x1A_Escape_Sequences
//https://wiki.tockdom.com/wiki/BMG_(File_Format)
//https://wiki.tockdom.com/wiki/Extended_Symbols#Mario_Kart_Wii_Specific

//#ifdef JMS_TARGET_REVOKART

typedef enum <uint16>
{
    RevolutionKart_Region_JPN,
    RevolutionKart_Region_USA,
    RevolutionKart_Region_EUR,
    RevolutionKart_Region_AUS,
    RevolutionKart_Region_TAI,
    RevolutionKart_Region_SKO,
    RevolutionKart_Region_CHN
} RevolutionKart_Region;

typedef enum <uint16> //Refer to fonts
{
    //Kanji (kart_kanji_font.rfnt / kart_font_korea.rfnt in KOR)
    RevolutionKart_UnicodeChar_Kanji_Timer0 = 9312,
    RevolutionKart_UnicodeChar_Kanji_Timer1,
    RevolutionKart_UnicodeChar_Kanji_Timer2,
    RevolutionKart_UnicodeChar_Kanji_Timer3,
    RevolutionKart_UnicodeChar_Kanji_Timer4,
    RevolutionKart_UnicodeChar_Kanji_Timer5,
    RevolutionKart_UnicodeChar_Kanji_Timer6,
    RevolutionKart_UnicodeChar_Kanji_Timer7,
    RevolutionKart_UnicodeChar_Kanji_Timer8,
    RevolutionKart_UnicodeChar_Kanji_TimerColon,
    RevolutionKart_UnicodeChar_Kanji_TimerDot,
    RevolutionKart_UnicodeChar_Kanji_TimerSlash,
    RevolutionKart_UnicodeChar_Kanji_TimerDash,
    RevolutionKart_UnicodeChar_Kanji_TimerCross,
    
    //Rodin (tt_kart_font_rodan_ntlg_pro_b.rfnt)
    RevolutionKart_UnicodeChar_Rodin_WhiteQuestionMarkBox = 57451,
    
    //UI extensions (tt_kart_extension_font.rfnt)
    RevolutionKart_UnicodeChar_UIX_BlackQuestionMarkBox = 61440,
    RevolutionKart_UnicodeChar_UIX_WiiMote_TwoButton = 61488,
    RevolutionKart_UnicodeChar_UIX_WiiMote_TwoButton_Small,
    RevolutionKart_UnicodeChar_UIX_WiiMote_AButton = 61492,
    RevolutionKart_UnicodeChar_UIX_WiiMote_AButton_Small,
    RevolutionKart_UnicodeChar_UIX_Classic_AButton = 61496,
    RevolutionKart_UnicodeChar_UIX_Classic_AButton_Small,
    RevolutionKart_UnicodeChar_UIX_GC_AButton = 61500,
    RevolutionKart_UnicodeChar_UIX_GC_AButton_Small,
    RevolutionKart_UnicodeChar_UIX_WiiMote_BButton = 61505,
    RevolutionKart_UnicodeChar_UIX_WiiMote_OneButton = 61507,
    RevolutionKart_UnicodeChar_UIX_WiiMote_PlusButton,
    RevolutionKart_UnicodeChar_UIX_WiiMote_PlusButton_Small = 61511,
    RevolutionKart_UnicodeChar_UIX_Classic_BButton = 61520,
    RevolutionKart_UnicodeChar_UIX_GC_BButton = 61528,
    RevolutionKart_UnicodeChar_UIX_GC_StartButton = 61534,
    RevolutionKart_UnicodeChar_UIX_GC_StartButton_Small,
    RevolutionKart_UnicodeChar_UIX_EmptyForTab, //?
    RevolutionKart_UnicodeChar_UIX_OneStar,
    RevolutionKart_UnicodeChar_UIX_TwoStar,
    RevolutionKart_UnicodeChar_UIX_ThreeStar,
    RevolutionKart_UnicodeChar_UIX_WiiWheel,
    RevolutionKart_UnicodeChar_UIX_WiiWheelOneStar,
    RevolutionKart_UnicodeChar_UIX_WiiWheelTwoStar,
    RevolutionKart_UnicodeChar_UIX_WiiWheelThreeStar,
    RevolutionKart_UnicodeChar_UIX_Coin,
    RevolutionKart_UnicodeChar_UIX_Balloons,
    RevolutionKart_UnicodeChar_UIX_GoldTrophy,
    RevolutionKart_UnicodeChar_UIX_SilverTrophy,
    RevolutionKart_UnicodeChar_UIX_BronzeTrophy,
    RevolutionKart_UnicodeChar_UIX_LeaderboardCrown,
    RevolutionKart_UnicodeChar_UIX_GoldWiiWheel = 61556,
    RevolutionKart_UnicodeChar_UIX_GoldWiiWheelOneStar,
    RevolutionKart_UnicodeChar_UIX_GoldWiiWheelTwoStar,
    RevolutionKart_UnicodeChar_UIX_GoldWiiWheelThreeStar,
    RevolutionKart_UnicodeChar_UIX_RankA,
    RevolutionKart_UnicodeChar_UIX_RankB,
    RevolutionKart_UnicodeChar_UIX_RankC,
    RevolutionKart_UnicodeChar_UIX_RankD,
    RevolutionKart_UnicodeChar_UIX_RankE,
    
    //Indicator lights (indicator_font.rfnt)
    RevolutionKart_UnicodeChar_IndicatorLight_Unknown = 61696,
    RevolutionKart_UnicodeChar_IndicatorLight_Empty = 61698,
    RevolutionKart_UnicodeChar_IndicatorLight_WiiMote_NoController,
    RevolutionKart_UnicodeChar_IndicatorLight_P1_WiiMote1 = 61704,
    RevolutionKart_UnicodeChar_IndicatorLight_P1_WiiMote2,
    RevolutionKart_UnicodeChar_IndicatorLight_P1_WiiMote3,
    RevolutionKart_UnicodeChar_IndicatorLight_P1_WiiMote4,
    RevolutionKart_UnicodeChar_IndicatorLight_P1_GC1 = 61708,
    RevolutionKart_UnicodeChar_IndicatorLight_P1_GC2,
    RevolutionKart_UnicodeChar_IndicatorLight_P1_GC3,
    RevolutionKart_UnicodeChar_IndicatorLight_P1_GC4,
    RevolutionKart_UnicodeChar_IndicatorLight_P2_WiiMote1 = 61712,
    RevolutionKart_UnicodeChar_IndicatorLight_P2_WiiMote2,
    RevolutionKart_UnicodeChar_IndicatorLight_P2_WiiMote3,
    RevolutionKart_UnicodeChar_IndicatorLight_P2_WiiMote4,
    RevolutionKart_UnicodeChar_IndicatorLight_P2_GC1 = 61716,
    RevolutionKart_UnicodeChar_IndicatorLight_P2_GC2,
    RevolutionKart_UnicodeChar_IndicatorLight_P2_GC3,
    RevolutionKart_UnicodeChar_IndicatorLight_P2_GC4,
    RevolutionKart_UnicodeChar_IndicatorLight_P3_WiiMote1 = 61720,
    RevolutionKart_UnicodeChar_IndicatorLight_P3_WiiMote2,
    RevolutionKart_UnicodeChar_IndicatorLight_P3_WiiMote3,
    RevolutionKart_UnicodeChar_IndicatorLight_P3_WiiMote4,
    RevolutionKart_UnicodeChar_IndicatorLight_P3_GC1 = 61724,
    RevolutionKart_UnicodeChar_IndicatorLight_P3_GC2,
    RevolutionKart_UnicodeChar_IndicatorLight_P3_GC3,
    RevolutionKart_UnicodeChar_IndicatorLight_P3_GC4,
    RevolutionKart_UnicodeChar_IndicatorLight_P4_WiiMote1 = 61728,
    RevolutionKart_UnicodeChar_IndicatorLight_P4_WiiMote2,
    RevolutionKart_UnicodeChar_IndicatorLight_P4_WiiMote3,
    RevolutionKart_UnicodeChar_IndicatorLight_P4_WiiMote4,
    RevolutionKart_UnicodeChar_IndicatorLight_P4_GC1 = 61732,
    RevolutionKart_UnicodeChar_IndicatorLight_P4_GC2,
    RevolutionKart_UnicodeChar_IndicatorLight_P4_GC3,
    RevolutionKart_UnicodeChar_IndicatorLight_P4_GC4
} RevolutionKart_UnicodeChar;

typedef enum <uint16>
{
    RevolutionKart_Insertion_CurrentPlayerName = 0,
    RevolutionKart_Insertion_ContextDependentInteger = 16, //Error code or MKW Channel blocks (0 if none), 1 if Wins
    RevolutionKart_Insertion_InsertableName, //Pop in plus at WiiMote add, or ii on tournament msg or veh name in veh unlock, or timeMMSSXXX, cup name
    RevolutionKart_Insertion_PlayerName, //Also 19, no clue why
    RevolutionKart_Insertion_PlayerController_Indictator = 20, //Light on WiiMote/GC Controller, three red ???'s on WiiMote add
    RevolutionKart_Insertion_BlackQuestionBox, //Other player region?
    RevolutionKart_Insertion_PlusZero, //?
    RevolutionKart_Insertion_PlayerController_BButton, //Displayed as Wii Remote B button in slide message boxes (single button, not yes/no), regardless of the controller, does not display in popup boxes
    RevolutionKart_Insertion_WiiFriend = 32
} RevolutionKart_InsertionType;

typedef enum <uint16>
{
    RevolutionKart_TextModify_TextColor_Gray,
    RevolutionKart_TextModify_TextColor_Red3Unused,
    RevolutionKart_TextModify_TextColor_White,
    RevolutionKart_TextModify_TextColor_Transparent,
    RevolutionKart_TextModify_TextColor_Red2,
    RevolutionKart_TextModify_TextColor_Blue1,
    RevolutionKart_TextModify_TextColor_Yellow,
    RevolutionKart_TextModify_TextColor_Blue2,
    RevolutionKart_TextModify_TextColor_Red3,
    RevolutionKart_TextModify_TextColor_Green,
    RevolutionKart_TextModify_TextColor_Red1
} RevolutionKart_TextModify_TextColorType;

typedef enum <uint16>
{
    RevolutionKart_TextModify_FontSizePct,  
    RevolutionKart_TextModify_TextColor
} RevolutionKart_TextModifyType;

typedef enum <ubyte>
{
    RevolutionKart_FontType_Rodan, //Final race, countdown
    RevolutionKart_FontType_Kanji, //Common text letters
    RevolutionKart_FontType_UIX, //UI extensions (non-letter textures [controller button, ranks etc])
    RevolutionKart_FontType_Indicator, //Controller light, unused
    RevolutionKart_FontType_FontNumbersRed, 
    RevolutionKart_FontType_FontNumbersBlue
    //Anything beyond is a crash
} RevolutionKart_FontType;

typedef struct JMS_CustomMessageEntryInfo
{
    RevolutionKart_FontType fontType; //Font from Font.arc
    byte pad[3]; //I'd use I32 but these values do nothing
};

typedef enum <ubyte>
{
    RevolutionKart_TextModify,
    RevolutionKart_UnicodeCharacter,
    RevolutionKart_Insertion,
    RevolutionKart_Unknown,
    RevolutionKart_ConditionalParameter
} JMS_CustomTagType;

typedef struct JMS_CustomTagGroup
{
    JMS_CustomTagType tagType;
    switch (tagType)
    {
        case RevolutionKart_TextModify: RevolutionKart_TextModifyType textModifyType; switch (textModifyType) { case 0: uint32 fontSizePct; if (printControlTagInfo) { Printf("<FontSizePercent%i>", fontSizePct); } break; case 1: RevolutionKart_TextModify_TextColorType textColorIdx; if (printControlTagInfo) { Printf("<%s>", EnumToString(textColorIdx)); } break; }
        case RevolutionKart_UnicodeCharacter: uint16 dmy; wchar_t unicodeChar; if (printControlTagInfo) { Printf("<UnicodeChar%x>", unicodeChar); } break; //Todo, should we use RevolutionKart_UnicodeChar or wchar_t
        case RevolutionKart_Insertion: RevolutionKart_InsertionType insertionType; uint16 index; if (printControlTagInfo) { Printf("<%s index=%i", EnumToString(insertionType), index); } if (insertionType == RevolutionKart_Insertion_ContextDependentInteger) { uint16 digits; if (printControlTagInfo) { Printf("<ContextDependentInteger digits=\"%i\">", digits); } } if (printControlTagInfo) { Printf(">"); } break;
        case RevolutionKart_ConditionalParameter: uint16 dmy; uint16 checkOppositeInstead; uint16 param1; uint16 param2; if (printControlTagInfo) { Printf("<ConditionalParameter checkRightInstead=%i param1=%i param2=%i />", checkOppositeInstead, param1, param2); } break;
        default: byte unknownTag[tagSize-3]; break;
    }
};

//#endif